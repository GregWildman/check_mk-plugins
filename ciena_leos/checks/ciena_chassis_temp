#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# +--- TEMPERATURE STATUS --+
# | Current | Low   | High  |
# +---------+-------+-------+
# | 35  C   | 18  C | 41  C |
# +---------+-------+-------+
#
# .1.3.6.1.4.1.6141.2.60.11.1.1.5.1.1.1.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.5.1.1.2.1 = INTEGER: 35
# .1.3.6.1.4.1.6141.2.60.11.1.1.5.1.1.3.1 = INTEGER: 50
# .1.3.6.1.4.1.6141.2.60.11.1.1.5.1.1.4.1 = INTEGER: 0

ciena_chassis_temp_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.6141.1")

factory_settings["ciena_chassis_temp_default_levels"] = {
    "levels": (70, 80),
}

def inventory_ciena_chassis_temp(info):
    for temp_id, temp, high_threshold, low_threshold, temp_state in info:
        if temp_id != "":
            yield temp_id, {}

def check_ciena_chassis_temp(item, params, info):
    for temp_id, raw_temp, high_threshold, low_threshold, temp_state in info:
        if temp_id == item:
            if raw_temp == "":
                yield 3, "Chassis temperature info not available"

            temp = float(raw_temp)
            yield check_temperature(temp, params, "ciena_chassis_temp_%s" % item)

check_info["ciena_chassis_temp"] = {
    "check_function"          : check_ciena_chassis_temp,
    "inventory_function"      : inventory_ciena_chassis_temp,
    "service_description"     : "Temperature %s",
    "group"                   : "temperature",
    "has_perfdata"            : True,
    "snmp_info"               : (".1.3.6.1.4.1.6141.2.60.11.1.1.5", [ # WWP-LEOS-CHASSIS-MIB::wwpLeosChassisTempSensor
                                   "1.1.1",   #  wwpLeosChassisTempSensorNum              0
                                   "1.1.2",   #  wwpLeosChassisTempSensorValue            1
                                   "1.1.3",   #  wwpLeosChassisTempSensorHighThreshold    2
                                   "1.1.4",   #  wwpLeosChassisTempSensorLowThreshold     3
                                   "1.1.5",   #  wwpLeosChassisTempSensorState            4
                                ]),
    "snmp_scan_function"      : ciena_chassis_temp_scan,
    "includes"                : [ "temperature.include" ],
    "default_levels_variable" : "ciena_chassis_temp_default_levels",
}

# Fin.

