#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# +------------ FAN SPEED STATUS -------------+
# | FanId | Current   | Average   | Minimum   |
# +-------+-----------+-----------+-----------+
# | 1     | 4560  rpm | 4560  rpm | 4500  rpm |
# | 2     | 4950  rpm | 4920  rpm | 4860  rpm |
# +-------+-----------+-----------+-----------+
#
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.1.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.1.2 = INTEGER: 2
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.2.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.2.2 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.3.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.3.2 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.5.1 = INTEGER: 4560
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.5.2 = INTEGER: 4950
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.6.1 = INTEGER: 4500
# .1.3.6.1.4.1.6141.2.60.11.1.1.4.1.1.6.2 = INTEGER: 4860
#
# +---------------- CHASSIS DEVICE ID ----------------+
# | Parameter                 |                       |
# +---------------------------+-----------------------+
# | Device Type               | 086                   |
# | Part Number/Revision      | 1703960840/006        |
# | Serial Number             | M6713730              |
# | Manufactured Date         | 20120627              |
# | Chassis MAC Address       | 00:23:8a:11:7c:50     |
# | Param Version             | 005                   |
# +---------------------------+-----------------------+
#
# .1.3.6.1.4.1.6141.2.60.11.1.1.1.50.0 = Hex-STRING: 00 23 8A 11 7C 50 
# .1.3.6.1.4.1.6141.2.60.11.1.1.1.51.0 = STRING: "086"
# .1.3.6.1.4.1.6141.2.60.11.1.1.1.52.0 = STRING: "M6713730"
# .1.3.6.1.4.1.6141.2.60.11.1.1.1.53.0 = Hex-STRING: 07 DC 1B 06 00 00 00 00 2B 00 00 
# .1.3.6.1.4.1.6141.2.60.11.1.1.1.54.0 = STRING: "005"
#
# +---------- POWER SUPPLY STATUS -----------+
# | Id      | Type       | State   | PS Fan  |
# +---------+------------+---------+---------+
# | A       | DC         | Online  | Online  |
# | B       | DC         | Online  | Online  |
# +---------+------------+---------+---------+
#
# .1.3.6.1.4.1.6141.2.60.11.1.1.3.1.1.1.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.3.1.1.1.2 = INTEGER: 2
# .1.3.6.1.4.1.6141.2.60.11.1.1.3.1.1.2.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.3.1.1.2.2 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.3.1.1.3.1 = INTEGER: 2
# .1.3.6.1.4.1.6141.2.60.11.1.1.3.1.1.3.2 = INTEGER: 2
# .1.3.6.1.4.1.6141.2.60.11.1.1.3.1.1.4.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.3.1.1.4.2 = INTEGER: 1
#
# +--- TEMPERATURE STATUS --+
# | Current | Low   | High  |
# +---------+-------+-------+
# | 35  C   | 18  C | 41  C |
# +---------+-------+-------+
#
# .1.3.6.1.4.1.6141.2.60.11.1.1.5.1.1.1.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.11.1.1.5.1.1.2.1 = INTEGER: 35
# .1.3.6.1.4.1.6141.2.60.11.1.1.5.1.1.3.1 = INTEGER: 50
# .1.3.6.1.4.1.6141.2.60.11.1.1.5.1.1.4.1 = INTEGER: 0

ciena_chassis_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.6141.1")

ciena_chassis_info = [(".1.3.6.1.4.1.6141.2.60.11.1.1.1", [ # WWP-LEOS-CHASSIS-MIB::wwpLeosChassisModule
                        BINARY("50.0"),   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisMacAddress                 0
                               "51.0",    #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisDeviceId                   1
                               "52.0",    #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisSerialNumber               2
                        BINARY("53.0"),   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisMfgDate                    3
                               "54.0",    #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisParamVersion               4
                          ]),

                      (".1.3.6.1.4.1.6141.2.60.11.1.1.3", [ # WWP-LEOS-CHASSIS-MIB::wwpLeosChassisPowerSupplyModule
                               "1.1.1",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisPowerSupplyNum             0
                               "1.1.2",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisPowerSupplyState           1
                               "1.1.3",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisPowerSupplyType            2
                               "1.1.4",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisPowerSupplyRedundantState  3
                         ]),

                      (".1.3.6.1.4.1.6141.2.60.11.1.1.4", [ # WWP-LEOS-CHASSIS-MIB::wwpLeosChassisFanModule
                               "1.1.1",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisFanModuleNum               0
                               "1.1.2",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisFanModuleType              1
                               "1.1.3",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisFanModuleStatus            2
                               "1.1.5",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisFanCurrentSpeed            3
                               "1.1.6",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisFanMinSpeed                4
                         ]),

                      (".1.3.6.1.4.1.6141.2.60.11.1.1.5", [ # WWP-LEOS-CHASSIS-MIB::wwpLeosChassisTempSensor
                               "1.1.1",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisTempSensorNum              0
                               "1.1.2",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisTempSensorValue            1
                               "1.1.3",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisTempSensorHighThreshold    2
                               "1.1.4",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisTempSensorLowThreshold     3
                               "1.1.5",   #  WWP-LEOS-CHASSIS-MIB::wwpLeosChassisTempSensorState            4
                          ]),
                     ]

#.
#   .--fan-----------------------------------------------------------------.
#   |                            __                                        |
#   |                           / _| __ _ _ __                             |
#   |                          | |_ / _` | '_ \                            |
#   |                          |  _| (_| | | | |                           |
#   |                          |_|  \__,_|_| |_|                           |
#   |                                                                      |
#   +----------------------------------------------------------------------+

def inventory_ciena_chassis_fan(info):
    chassis_fan = info[2]  # wwpLeosChassisFanModule
    for fan_id, fan_type, status, current_speed, min_speed in chassis_fan:
        if fan_id.isdigit():
            yield fan_id, {}

def check_ciena_chassis_fan(item, params, info):
    map_types = {
       "1": ('fixed'),
       "2": ('hotswop'),
       "3": ('not installed'),
    }
    map_status = {
       "1": ("ok"),
       "2": ("pending"),
       "3": ("failure"),
    }

    chassis_fan = info[2]  # wwpLeosChassisFanModule
    for fan_id, fan_type, fan_status_raw, current_speed, min_speed in chassis_fan:
        if fan_id == item:
            rpm = int(current_speed)
            fan_status = map_status.get(fan_status_raw)

            perfdata = []
            if params.get("output_metrics"):
                perfdata = [ ("fan", rpm)]

            if fan_status == "ok":
                status = 0
                if rpm > 0:
                    infotext = "Speed at %d RPM" % (rpm)
                else:
                    infotext = "Fans Stopped (low chassis temp)"
            else:
                infotext = "Fan has failed"
                status = 2

            infotext += ", Module Type: %s" % (map_types.get(fan_type))
            yield status, infotext, perfdata

check_info["ciena_chassis.fan"] = {
    "inventory_function"      : inventory_ciena_chassis_fan,
    "check_function"          : check_ciena_chassis_fan,
    "service_description"     : "Fan %s",
    "snmp_info"               : ciena_chassis_info,
    "snmp_scan_function"      : ciena_chassis_scan,
    "has_perfdata"            : True,
    "group"                   : "hw_fans",
}

#.
#   .--info----------------------------------------------------------------.
#   |                           _        __                                |
#   |                          (_)_ __  / _| ___                           |
#   |                          | | '_ \| |_ / _ \                          |
#   |                          | | | | |  _| (_) |                         |
#   |                          |_|_| |_|_|  \___/                          |
#   |                                                                      |
#   +----------------------------------------------------------------------+

def ciena_chassis_info_render_mac_address(ifPhysAddress):
    if type(ifPhysAddress) != list:
        mac_bytes = map(ord, ifPhysAddress)
    else:
        mac_bytes = ifPhysAddress
    return (":".join(["%02s" % hex(m)[2:] for m in mac_bytes]).replace(' ', '0')).upper()

def inventory_ciena_chassis_info(info):
    chassis_info = info[0]  # wwpLeosChassisModule
    for mac, dev_id, serial_no, mfg_date, version in chassis_info:
        if mac != "":
            yield None, {}

def check_ciena_chassis_info(item, params, info):
    chassis_info = info[0]  # wwpLeosChassisModule
    for mac, dev_id, serial_no, mfg_date, version in chassis_info:
        infotext = 'MAC: %s, Type: %s, Serial: %s' % \
                   ( ciena_chassis_info_render_mac_address(mac), dev_id, serial_no )
        return 0, infotext


check_info["ciena_chassis.info"] = {
    "inventory_function"        : inventory_ciena_chassis_info,
    "check_function"            : check_ciena_chassis_info,
    "service_description"       : 'Chassis Info',
    "snmp_info"                 : ciena_chassis_info,
    "snmp_scan_function"        : ciena_chassis_scan,

}

#.
#   .--psu-----------------------------------------------------------------.
#   |                                                                      |
#   |                           _ __  ___ _   _                            |
#   |                          | '_ \/ __| | | |                           |
#   |                          | |_) \__ \ |_| |                           |
#   |                          | .__/|___/\__,_|                           |
#   |                          |_|                                         |
#   +----------------------------------------------------------------------+

def inventory_ciena_chassis_psu(info):
    chassis_psu = info[1]  # wwpLeosChassisPowerSupplyModule
    for psu_id, psu_state, psu_type, psu_redundate_state in chassis_psu:
        if psu_type != "":
            yield psu_id, {}

def check_ciena_chassis_psu(item, _no_params, info):
    map_state = {
       "1": ('online'),
       "2": ('offline'),
       "3": ('faulted'),
    }
    map_type = {
       "1": ('AC'),
       "2": ('DC'),
       "3": ('unequipped'),
    }

    chassis_psu = info[1]  # wwpLeosChassisPowerSupplyModule
    for psu_id, psu_state, psu_type, psu_redundate_state in chassis_psu:
        if psu_id == item:
            infotext = "(%s)" % map_state.get(psu_state)
# Customer still needs to decide how to handle this.
#            if saveint(psu_state) > 1:
#                yield 2, infotext

            if psu_type == "3":
                infotext += " No power supply module present, ignoring"
            else:
                infotext += " Type: %s, Redundancy: " % map_type.get(psu_type)

                # Customer still needs to decide how to handle this.
                if psu_redundate_state == "1":
                    infotext += "protected"
                else:
                    infotext += "unprotected"

            yield 0, infotext

check_info["ciena_chassis.psu"] = {
    "check_function"        : check_ciena_chassis_psu,
    "inventory_function"    : inventory_ciena_chassis_psu,
    "service_description"   : "Power Supply %s",
    "snmp_info"             : ciena_chassis_info,
    "snmp_scan_function"    : ciena_chassis_scan,
}

#.
#   .--temp----------------------------------------------------------------.
#   |                       _                                              |
#   |                      | |_ ___ _ __ ___  _ __                         |
#   |                      | __/ _ \ '_ ` _ \| '_ \                        |
#   |                      | ||  __/ | | | | | |_) |                       |
#   |                       \__\___|_| |_| |_| .__/                        |
#   |                                        |_|                           |
#   +----------------------------------------------------------------------+

factory_settings["ciena_chassis_temp_default_levels"] = {
    "levels": (70, 80),
}

def inventory_ciena_chassis_temp(info):
    chassis_temp = info[3]  # wwpLeosChassisTempSensor
    for temp_id, temp, high_threshold, low_threshold, temp_state in chassis_temp:
        if temp_id != "":
            yield temp_id, {}

def check_ciena_chassis_temp(item, params, info):
    chassis_temp = info[3]  # wwpLeosChassisTempSensor
    for temp_id, raw_temp, high_threshold, low_threshold, temp_state in chassis_temp:
        if temp_id == item:
            if raw_temp == "":
                yield 3, "Chassis temperature info not available"

            temp = float(raw_temp)
            yield check_temperature(temp, params, "ciena_chassis_temp_%s" % item)

check_info["ciena_chassis.temp"] = {
    "check_function"          : check_ciena_chassis_temp,
    "inventory_function"      : inventory_ciena_chassis_temp,
    "service_description"     : "Temperature %s",
    "group"                   : "temperature",
    "has_perfdata"            : True,
    "snmp_info"               : ciena_chassis_info,
    "snmp_scan_function"      : ciena_chassis_scan,
    "includes"                : [ "temperature.include" ],
    "default_levels_variable" : "ciena_chassis_temp_default_levels",
}

# Fin.

