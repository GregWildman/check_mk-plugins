#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# .1.3.6.1.4.1.6141.2.60.35.1.8.1.1.1.1.1400 = Gauge32: 1400
# .1.3.6.1.4.1.6141.2.60.35.1.8.1.1.2.1.1400 = INTEGER: 2
# .1.3.6.1.4.1.6141.2.60.35.1.8.1.1.3.1.1400 = INTEGER: 2
# .1.3.6.1.4.1.6141.2.60.35.1.8.1.1.5.1.1400 = Hex-STRING: 40 47 50 00 40 10 
# .1.3.6.1.4.1.6141.2.60.35.1.8.1.1.7.1.1400 = INTEGER: 2
# .1.3.6.1.4.1.6141.2.60.35.1.8.1.1.8.1.1400 = INTEGER: 2
# .1.3.6.1.4.1.6141.2.60.35.1.8.1.1.9.1.1400 = INTEGER: 2
# .1.3.6.1.4.1.6141.2.60.35.1.8.1.1.50.1.1400 = STRING: "GP-004010-northcliff"
# .1.3.6.1.4.1.6141.2.60.35.1.8.1.1.51.1.1400 = STRING: "NORTHCLIFF-0_pri"


ciena_cfm_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.6141.1") and \
                             oid(".1.3.6.1.4.1.6141.2.60.35.1.1.1.0") != None

ciena_cfm_info = (".1.3.6.1.4.1.6141.2.60.35.1.8.1", [   #  WWP-LEOS-CFM-MIB::wwpLeosCfmRemoteMEPTable
                                     OID_END,
                                       "1.1",        # wwpLeosCfmRemoteMEPID
                                       "1.2",        # wwpLeosCfmRemoteMEPAdminState
                                       "1.3",        # wwpLeosCfmRemoteMEPOperState
                                BINARY("1.5"),       # wwpLeosCfmRemoteMEPMacAddr
                                       "1.7",        # wwpLeosCfmRemoteMEPFailureFlag
                                       "1.8",        # wwpLeosCfmRemoteMEPCCMErrorFlag
                                       "1.9",        # wwpLeosCfmRemoteMEPRDIErrorFlag
                                      "1.50",        # wwpLeosCfmRemoteMEPSubPortName
                                      "1.51",        # wwpLeosCfmRemoteMEPServiceName
                      ])


def inventory_ciena_cfm(info):
    for oid_idx, mep_id, admin_state, oper_state, mac, flag_fail, flag_ccm, flag_rdi, port_name, svc_name in info:
        if oper_state == "2":  # enabled
            idx = int(oid_idx.split(".")[0])
            yield "%04d" % idx, {}

def check_ciena_cfm(item, params, info):
    for oid_idx, mep_id, admin_state, oper_state, mac, flag_fail, flag_ccm, flag_rdi, port_name, svc_name in info:
        idx = "%04d" % int(oid_idx.split(".")[0])
        if item == idx:
            state = 0
            if admin_state != "2" or oper_state != "2":
                state = 2
            infotext = "MepID: %s, Service: %s, MAC: %s, Instance: %s" % \
                       (mep_id, svc_name, ciena_render_mac_address(mac), port_name) 
            yield state, infotext

            alarm_cnt = 0
            alarmtext = []
            if flag_fail == "1": # true
                alarmtext += ["rMep"]
                alarm_cnt += 1
            if flag_ccm == "1": # true
                alarmtext += ["CCM"]
                alarm_cnt += 1
            if flag_rdi == "1": # true
                alarmtext += ["RDI"]
                alarm_cnt += 1

            if alarm_cnt > 0:
                state = 2
                yield 2, "Faults: %d" % alarm_cnt
                yield 0, ", ".join(alarmtext)


check_info["ciena_cfm"] = {
    "inventory_function"        : inventory_ciena_cfm,
    "check_function"            : check_ciena_cfm,
    "service_description"       : 'CFM Remote MEP %s',
    "snmp_info"                 : ciena_cfm_info,
    "snmp_scan_function"        : ciena_cfm_scan,
    "includes"                  : [ "ciena.include" ],
}

# Fin.

