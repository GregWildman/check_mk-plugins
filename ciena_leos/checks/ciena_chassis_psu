#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# +---------- POWER SUPPLY STATUS -----------+
# | Id      | Type       | State   | PS Fan  |
# +---------+------------+---------+---------+
# | A       | DC         | Online  | Online  |
# | B       | DC         | Online  | Online  |
# +---------+------------+---------+---------+
#
# +---------------- POWER SUPPLY PSA -----------------+
# | Parameter                 | Value                 |
# +---------------------------+-----------------------+
# | Model Number              | 170-0013-900          |
# | Serial Number             | M7231890              |
# | Revision                  | ;;D                   |
# | CLEI Code                 | CMUPAAAAAA            |
# | Manufactured Date         | 1308                  |
# | Input                     | DC                    |
# | Input Voltage             | 20-60                 |
# | Output Voltage            | 12                    |
# | Manufacturing Location    | CHINA                 |
# | Checksum                  | 53                    |
# +---------------------------+-----------------------+
#
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.1.1 = INTEGER: 1
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.2.1 = INTEGER: 1
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.3.1 = INTEGER: 2
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.4.1 = INTEGER: 1
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.5.1 = STRING: "170-0013-900"
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.6.1 = STRING: "M7231890"
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.7.1 = STRING: "CMUPAAAAAA"
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.8.1 = STRING: ";;D"
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.9.1 = STRING: "1308"
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.10.1 = INTEGER: 1
# SNMPv2-SMI::enterprises.6141.2.60.11.1.1.3.1.1.11.1 = STRING: "PSA"

# We are having too many 3930's crashing when trying to walk the PSU tree. Do not
# run this check against 3930's (6141.1.85)
ciena_chassis_psu_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.6141.1") and \
                                     oid(".1.3.6.1.2.1.1.2.0") != ".1.3.6.1.4.1.6141.1.85"

def inventory_ciena_chassis_psu(info):
    for psu_id, psu_state, psu_type, psu_redundate_state, model_num, serial_num, clei, man_date in info:
        if psu_type != "":
            yield psu_id, {}

def check_ciena_chassis_psu(item, _no_params, info):
    map_state = {
       "1": ('online'),
       "2": ('offline'),
       "3": ('faulted'),
    }
    map_type = {
       "1": ('AC'),
       "2": ('DC'),
       "3": ('unequipped'),
    }

    for psu_id, psu_state, psu_type, psu_redundate_state, model_num, serial_num, clei, man_date in info:
        if psu_id == item:
            infotext = "(%s)" % map_state.get(psu_state)
# Customer still needs to decide how to handle this.
#            if saveint(psu_state) > 1:
#                yield 2, infotext

            if psu_type == "3":
                infotext += " No power supply module present, ignoring"
            else:
                infotext += " Type: %s, Redundancy: " % map_type.get(psu_type)

                # Customer still needs to decide how to handle this.
                if psu_redundate_state == "1":
                    infotext += "protected"
                else:
                    infotext += "unprotected"

                infotext += ", Model: %s, Serial: %s, Date: %s" % (model_num, serial_num, man_date)

            yield 0, infotext

check_info["ciena_chassis_psu"] = {
    "check_function"        : check_ciena_chassis_psu,
    "inventory_function"    : inventory_ciena_chassis_psu,
    "service_description"   : "Power Supply %s",
    "snmp_info"             : (".1.3.6.1.4.1.6141.2.60.11.1.1.3.1.1", [ # WWP-LEOS-CHASSIS-MIB::wwpLeosChassisPowerSupplyModule
                                   "1",   #  wwpLeosChassisPowerSupplyNum
                                   "2",   #  wwpLeosChassisPowerSupplyState
                                   "3",   #  wwpLeosChassisPowerSupplyType
                                   "4",   #  wwpLeosChassisPowerSupplyRedundantState
                                   "5",   #  wwpLeosChassisPowerSupplyModelNumber
                                   "6",   #  wwpLeosChassisPowerSupplySerialNumber
                                   "7",   #  wwpLeosChassisPowerSupplyCleiCode
                                   "9",   #  wwpLeosChassisPowerSupplyManufactureDate
                              ]),
    "snmp_scan_function"    : ciena_chassis_psu_scan,
}

# Fin.

