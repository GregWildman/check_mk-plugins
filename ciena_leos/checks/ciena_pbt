#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# WWP-LEOS-VPLS-MIB:: wwpLeosVplsEncapTunnelTable
# .1.3.6.1.4.1.6141.2.60.28.1.1.13.1.1.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.28.1.1.13.1.2.1 = STRING: "WBSDC"
# .1.3.6.1.4.1.6141.2.60.28.1.1.13.1.11.1 = Hex-STRING: 40 47 50 00 00 10 
# .1.3.6.1.4.1.6141.2.60.28.1.1.13.1.12.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.28.1.1.13.1.13.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.28.1.1.13.1.14.1 = INTEGER: 12
# .1.3.6.1.4.1.6141.2.60.28.1.1.13.1.18.1 = INTEGER: 1
# .1.3.6.1.4.1.6141.2.60.28.1.1.13.1.20.1 = INTEGER: 1934
# .1.3.6.1.4.1.6141.2.60.28.1.1.13.1.24.1 = INTEGER: 1
#
# WWP-LEOS-PBT-MIB::wwpLeosPbtBridgeNameMacMapTable
# .1.3.6.1.4.1.6141.2.60.38.1.1.2.1.2.1 = STRING: "GP-000010-WBSDC"
# .1.3.6.1.4.1.6141.2.60.38.1.1.2.1.3.1 = Hex-STRING: 40 47 50 00 00 10 

ciena_pbt_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.6141.1") and \
                             oid(".1.3.6.1.4.1.6141.2.60.28.1.1.13.1.1.1") != None

ciena_pbt_info = [( ".1.3.6.1.4.1.6141.2.60.28.1.1.13", [ #  WWP-LEOS-VPLS-MIB:: wwpLeosVplsEncapTunnelTable
                                        "1.1",        # wwpLeosVplsEncapTunnelId
                                        "1.2",        # wwpLeosVplsEncapTunnelName
                                BINARY("1.11"),       # wwpLeosVplsEncapTunnelDestResolvedMac
                                       "1.12",        # wwpLeosVplsEncapTunnelOperStatus
                                       "1.13",        # wwpLeosVplsEncapTunnelAdminStatus
                                       "1.14",        # wwpLeosVplsEncapTunnelDestResolvedPort
                                       "1.18",        # wwpLeosVplsEncapTunnelLspType
                                       "1.20",        # wwpLeosVplsEncapTunnelBVID
                                       "1.24",        # wwpLeosVplsEncapTunnelActive
                       ]),
                  (".1.3.6.1.4.1.6141.2.60.38.1.1.2", [   #  WWP-LEOS-PBT-MIB::wwpLeosPbtBridgeNameMacMapTable
                                       "1.2",         # wwpLeosPbtBridgeNameMacMapBridgeName
                                BINARY("1.3"),        # wwpLeosPbtBridgeNameMacMapMacAddr
                       ]),
                 ]


def ciena_pbt_render_mac_address(ifPhysAddress):
    if type(ifPhysAddress) != list:
        mac_bytes = map(ord, ifPhysAddress)
    else:
        mac_bytes = ifPhysAddress
    return (":".join(["%02s" % hex(m)[2:] for m in mac_bytes]).replace(" ", "0")).upper()

def inventory_ciena_pbt(info):
    for idx, name, mac, oper_status, admin_status, port, lsp_type, bvid, status in info[0]:
        if admin_status == "1":  # enabled
            yield "%02d" % int(idx), {}

def check_ciena_pbt(item, params, info):
    state = 0
    map_type = {
        "1": ("primary"),
        "2": ("backup"),
    }
    map_status = {
        "1": ("yes"),
        "2": ("no"),
    }

    for idx, name, mac, oper_status, admin_status, port, lsp_type, bvid, status in info[0]:
        if item == "%02d" % int(idx): 
            # Can we map a PBT Bridge mac to name 
            tunnel_dest = ciena_pbt_render_mac_address(mac)
            for pbt_bridge_name, pbt_bridge_mac in info[1]:
                if set(mac) == set(pbt_bridge_mac):
                    tunnel_dest = "%s (%s)" % (pbt_bridge_name, tunnel_dest)

            infotext = "%s, Dest: %s, B-VID: %s, Role: %s, Active: %s" % \
                (name, tunnel_dest, bvid, \
                 map_type.get(lsp_type, "unknown"), \
                 map_status.get(status, "unknown"))

            return (state, infotext)

check_info["ciena_pbt"] = {
    "inventory_function"        : inventory_ciena_pbt,
    "check_function"            : check_ciena_pbt,
    "service_description"       : 'PBT Tunnel %s',
    "snmp_info"                 : ciena_pbt_info,
    "snmp_scan_function"        : ciena_pbt_scan,
}

# Fin.

