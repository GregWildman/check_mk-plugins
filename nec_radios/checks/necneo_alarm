#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# MIB-PM-NEO-STD::trSysGroupTable
# .1.3.6.1.4.1.119.2.3.69.401.3.1.1.1.2.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.1.1.1.3.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.1.1.1.4.1 = INTEGER: 0
#
# MIB-PM-NEO-STD::modemSysGroupTable
# .1.3.6.1.4.1.119.2.3.69.401.3.2.1.1.4.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.2.1.1.5.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.2.1.1.6.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.2.1.1.7.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.2.1.1.11.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.2.1.1.12.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.2.1.1.13.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.2.1.1.20.1 = INTEGER: 0
# .1.3.6.1.4.1.119.2.3.69.401.3.2.1.1.22.1 = INTEGER: 0

necneo_alarm_scan = lambda oid: ".1.3.6.1.4.1.119.2.3.69" in oid(".1.3.6.1.2.1.1.2.0")

necneo_alarm_info = [(".1.3.6.1.4.1.119.2.3.69.401.3.1.1", [  #  MIB-PM-NEO-STD::trSysGroupTable
                         "1.2",     # txPowerAlarm
                         "1.3",     # txInputAlarm
                         "1.4",     # rxLevelAlarm
                         "1.5",     # apcAlarm
                         "1.6",     # truCpuAlarm
                         "1.7",     # truLORefAlarm
                         "1.9",     # truTypeMismatch
                    ]),
                    (".1.3.6.1.4.1.119.2.3.69.401.3.2.1", [  #  MIB-PM-NEO-STD::modemSysGroupTable
                         "1.4",     # highBERAlarm
                         "1.5",     # lowBERAlarm
                         "1.6",     # modAlarm
                         "1.7",     # demAlarm
                        "1.11",     # powerSupplyAlarm
                        "1.12",     # ifCableShortAlarm
                        "1.13",     # lof
                        "1.15",     # cableEQLAlarm
                        "1.19",     # routeId
                        "1.20",     # earlyWarning
                        "1.22",     # inputVoltageAlarm
                        "1.23",     # modemTypeMismatch
                    ]),
                    (".1.3.6.1.4.1.119.2.3.69.401.3.6.5", [  #  MIB-PM-NEO-STD::tcnCurrentUAE
                         "1.0",     # tcnUAEDMRWork
                         "2.0",     # tcnUAEDMRProt
                         "3.0",     # tcnUAEMUXWork
                         "4.0",     # tcnUAEMUXProt
                    ]),
                   ]

def inventory_necneo_alarm(info):
    if len(info[0][1]) > 0:
        yield None, {}

def check_necneo_alarm(item, no_params, info):
    odu_alarms, modem_alarms, uae_alarms = info
    alarms_triggered = []
    alarm_cnt = 0
    # Index of each alarm from snmp info.
    map_odu_alarm = {
       0 : ("TX Power"),
       1 : ("TX Input"),
       2 : ("RX Level"),
       3 : ("APC"),
       4 : ("ODU CPU/Cable Open"),
       5 : ("LO REF"),
       6 : ("ODU Type Mismatch"),
    }
    map_modem_alarm = {
       0 : ("High BER"),
       1 : ("Low BER"),
       2 : ("MOD"),
       3 : ("DEM"),
       4 : ("Power Supply"),
       5 : ("IF Cable Short"),
       6 : ("LOF"),
       7 : ("Cable EQL"),
       8 : ("Frame ID"),
       9 : ("Early Warning"),
      10 : ("Input Voltage"),
      11 : ("Modem Type Mismatch"),
    }
    map_uae_alarm = {
       0 : ("UAE-DMR Work"),
       1 : ("UAE-DMR Prot"),
       2 : ("UAE-MUX Work"),
       3 : ("UAE-MUX Prot"),
    }

    index = 0
    for alarm in odu_alarms[0]:
        if alarm and alarm != "0":
            alarm_cnt += 1
            alarms_triggered += [map_odu_alarm.get(index)]
        index += 1

    index = 0
    for alarm in modem_alarms[0]:
        if alarm and alarm != "0":
            alarm_cnt += 1
            alarms_triggered += [map_modem_alarm.get(index)]
        index += 1

    index = 0
    for alarm in uae_alarms[0]:
        if alarm and alarm != "0":
            alarm_cnt += 1
            alarms_triggered += [map_uae_alarm.get(index)]
        index += 1

    if alarm_cnt > 0:
        state = 2
        yield 2, "Count: %d" % alarm_cnt
        yield 0, ", ".join(alarms_triggered)
    else:
        yield 0, "All Clear"

check_info["necneo_alarm"] = {
    "inventory_function"        : inventory_necneo_alarm,
    "check_function"            : check_necneo_alarm,
    "service_description"       : 'Alarm',
    "snmp_info"                 : necneo_alarm_info,
    "snmp_scan_function"        : necneo_alarm_scan,
}

# Fin.

