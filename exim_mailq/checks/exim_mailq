#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# (c) 2015 EXA EDV GmbH
#          Marcel Pennewi√ü <marcel.pennewiss@exa-edv.de>
#
# Example output from agent:
#
# <<<exim_mailq>>>
#     2     668     44m     43m  TOTAL
#
# **************
#
# <<<exim_mailq>>>
#     4   252KB     61m      0m  TOTAL
#

# Defaults: size in MB, age = minutes
factory_settings["exim_mailq_default_levels"] = {
    "length"         : (500, 800),
    "size"           : (500, 800),
    "age"            : (8640, 11520),
}

def exim_mailq_to_bytes(value):
    if value[-1].isdigit():
        return int(value)

    size, uom = int(value[:-2]), value[-2:]
    uom = uom.lower()

    if uom == 'kb':
        return size * 1024
    elif uom == 'mb':
        return size * 1024 * 1024
    elif uom == 'gb':
        return size * 1024 * 1024 * 1024

def exim_mailq_to_seconds(value):
    if value[-1].isdigit():
        return int(value)

    time, uom = int(value[:-1]), value[-1:]
    uom = uom.lower()

    if uom == 'm':
        return time * 60
    elif uom == 'h':
        return time * 60 * 60
    elif uom == 'd':
        return time * 60 * 60 * 24

def inventory_exim_mailq(info):
    if len(info) > 0 and info[0] != '':
        return [("", {})]

def check_exim_mailq(_no_item, params, info):
    for line in info:
	if line[-1] == 'TOTAL':
            length    = int(line[0])

            length_warn, length_crit = params['length']
            size_warn, size_crit = params['size']
            age_warn, age_crit = params['age']
            size_warn *= 1024*1024
            size_crit *= 1024*1024
            age_warn *= 60
            age_crit *= 60

            if length == 0:
                return (0, 'OK - The mailqueue is empty ', [ ('length', 0, length_warn, length_crit),
                                                             ('size', 0, size_warn, size_crit),
                                                             ('age', 0, age_warn, age_crit) ])
            size     = exim_mailq_to_bytes(line[1])
            age      = exim_mailq_to_seconds(line[2])

    	    state = 0
            output = []
            perfdata = []

            cur_state, thresh_out = 0, ''
            if length >= length_crit:
                cur_state = 2
                thresh_out = '(!!)'
            elif length >= length_warn:
                cur_state = 1
                thresh_out = '(!)'
            output.append('Mailqueue length: %d%s' % (length, thresh_out))
            perfdata.append(('length', length, length_warn, length_crit))
            state = max(state, cur_state)

            cur_state, thresh_out = 0, ''
            if size >= size_crit:
                cur_state = 2
                thresh_out = '(!!)'
            elif size >= size_warn:
                cur_state = 1
                thresh_out = '(!)'
            output.append('Mailqueue size: %s%s' % (line[1], thresh_out))
            perfdata.append(('size', size, size_warn, size_crit))
            state = max(state, cur_state)

            cur_state, thresh_out = 0, ''
            if age >= age_crit:
                cur_state = 2
                thresh_out = '(!!)'
            elif age >= age_warn:
                cur_state = 1
                thresh_out = '(!)'
            output.append('Oldest mail: %s%s' % (line[2], thresh_out))
            perfdata.append(('age', age, age_warn, age_crit))
            state = max(state, cur_state)

            statname = { 0: "OK", 1:"WARN", 2:"CRIT" }[state]
            return (state, "%s - %s" % (statname, ', '.join(output)), perfdata)

    return (3, 'UNKNOWN - Could not find summarizing line in output')

check_info["exim_mailq"] = {
    "check_function"          : check_exim_mailq,
    "inventory_function"      : inventory_exim_mailq,
    "service_description"     : "Exim Queue",
    "has_perfdata"            : True,
    "default_levels_variable" : "exim_mailq_default_levels",
    "group"                   : "exim_mailq",
}

