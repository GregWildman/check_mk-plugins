#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# ICOM-WMAC-TS-MIB::icomWmacTsStatusTable
# .1.3.6.1.4.1.1807.111.1.1.1.2.1 = INTEGER: 4
# .1.3.6.1.4.1.1807.111.1.1.1.3.1 = INTEGER: 2
# .1.3.6.1.4.1.1807.111.1.1.1.4.1 = INTEGER: 2
# .1.3.6.1.4.1.1807.111.1.1.1.5.1 = Hex-STRING: 00 05 59 72 67 AC 
# .1.3.6.1.4.1.1807.111.1.1.1.6.1 = Hex-STRING: 00 05 59 5E FE 0A 
# .1.3.6.1.4.1.1807.111.1.1.1.7.1 = INTEGER: 1
# .1.3.6.1.4.1.1807.111.1.1.1.8.1 = STRING: "10.12.39.5"
# .1.3.6.1.4.1.1807.111.1.1.1.9.1 = INTEGER: 3
#
# ICOM-WPHY-MIB::icomWphyModemLinkStatusTable
# .1.3.6.1.4.1.1807.113.2.11.1.2.1.1 = INTEGER: -7832
# .1.3.6.1.4.1.1807.113.2.11.1.3.1.1 = INTEGER: 2063



intracom_cpe_scan = lambda oid: (oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.1807.1.2.251" or \
                                 oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.1807.1.2.259") and \
                                 oid(".1.3.6.1.4.1.1807.111.1.1.1.2.1") != None

intracom_cpe_info = [( ".1.3.6.1.4.1.1807.111.1.1", [   # ICOM-WMAC-TS-MIB
                                     "1.2.1",      # icomWmacTsStatusConnectivity
                                     "1.3.1",      # icomWmacTsStatusMonitoring
                              BINARY("1.5.1"),     # icomWmacTsStatusTsMacAddress
                              BINARY("1.6.1"),     # icomWmacTsStatusBsMacAddress
                                     "1.8.1",      # icomWmacTsStatusBsIpAddress
                                     "1.9.1",      # icomWmacTsStatusTsAssignedId
                     ]),
                     ( ".1.3.6.1.4.1.1807.113.2.11", [   # ICOM-WPHY-MIB
                                       "1.2",      # icomWphyModemLinkStatusRssi
                                       "1.3",      # icomWphyModemLinkStatusSnr
                     ]),
                    ]

def intracom_cpe_render_mac_address(ifPhysAddress):
    if type(ifPhysAddress) != list:
        mac_bytes = map(ord, ifPhysAddress)
    else:
        mac_bytes = ifPhysAddress
    return (":".join(["%02s" % hex(m)[2:] for m in mac_bytes]).replace(" ", "0")).upper()


def inventory_intracom_cpe(info):
    ts_id = int(info[0][0][5])
    if ts_id > 0:
        yield "%02d" % ts_id, {}

def check_intracom_cpe(item, params, info):
    state = 0
    map_state = {
       "1": ("disconnected"),
       "2": ("scanning"),
       "3": ("synchronized"),
       "4": ("connected"),
       "5": ("disabling"),
       "6": ("invalid"),
    }

    conn_state, monitoring, ts_mac_raw, bs_mac_raw, bs_ip, ts_id_raw = info[0][0]
    rssi_raw, snr_raw = info[1][0]
    ts_id = "%02d" % int(ts_id_raw)
    if item == ts_id:
        if conn_state != "4":
            state = 1

        rssi = float(rssi_raw) / 100
        snr = float(snr_raw) / 100
        infotext = "%s, BS IP: %s, BS MAC: %s, RSSI: %.2f dBm, SNR: %.2f dBm" % \
               (map_state.get(conn_state), bs_ip, intracom_cpe_render_mac_address(bs_mac_raw), rssi, snr) 
        perfdata = [("input_power", "%.1fdBm" % rssi), ("snr", "%.1fdBm" % snr)]

        return (state, infotext, perfdata)

    return (3, "No such terminal found, decommissioned ?")

check_info["intracom_cpe"] = {
    "check_function"            : check_intracom_cpe,
    "inventory_function"        : inventory_intracom_cpe,
    "service_description"       : "Terminal %s",
    "has_perfdata"              : True,
    "snmp_info"                 : intracom_cpe_info,
    "snmp_scan_function"        : intracom_cpe_scan,
}

# Fin.

