#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# ICOM-ETHER-MIB::icomEthStatsTable
# NOTE: According to the MIB this provide the mean Tx/Rx bit rate of the
#       current Ethernet interface (in kbps). We don't know over what time
#       period this is calculated. NOC wants to graph this rate.
# .1.3.6.1.4.1.1807.65.1.3.1.2.2 = Gauge32: 2155
# .1.3.6.1.4.1.1807.65.1.3.1.3.2 = Gauge32: 37898
# .1.3.6.1.4.1.1807.65.1.3.1.4.2 = Gauge32: 941
# .1.3.6.1.4.1.1807.65.1.3.1.5.2 = Gauge32: 4641

def intracom_eth_render_mac_address(ifPhysAddress):
    if type(ifPhysAddress) != list:
        mac_bytes = map(ord, ifPhysAddress)
    else:
        mac_bytes = ifPhysAddress
    return (":".join(["%02s" % hex(m)[2:] for m in mac_bytes]).replace(" ", "0")).upper()

def parse_intracom_eth(info):
    map_index = {
       1: ("01"),
       2: ("02"),
       3: ("20"),
       4: ("21"),
       5: ("22"),
       6: ("24"),
       7: ("50"),
    }
    map_ifalias = {
       1: ("gbe1"),
       2: ("gbe2"),
       3: ("outbound1"),
       4: ("outbound2"),
       5: ("inband"),
       6: ("protection-gbe"),
       7: ("wireless"),
    }
    parsed = []
    counter = 1
    icom_ether_index = 0

    rfc1213_mib = info[0]
    icom_ethstats_mib = info[1]

    for line in rfc1213_mib:
        if saveint(line[2]) == 6: # ethernet

            # Get the Intracom stats
            tx_kbit_rate, rx_kbit_rate, tx_pkt_rate, rx_pkt_rate = icom_ethstats_mib[icom_ether_index]
            icom_ether_index += 1    

            parsed.append( 
                       [ map_index.get(counter) ] +
                       line[1:5] +
                       [ rx_kbit_rate ] +
                       [ rx_pkt_rate ] +
                       [ tx_kbit_rate ] +
                       [ tx_pkt_rate ] +
                       [ map_ifalias.get(counter) ] +
                       line[5:]
                         )

        counter += 1

    return parsed
    

def inventory_intracom_eth(parsed):
    for ifIndex, ifDescr, ifType, ifSpeed, ifOperStatus, rx_kbit_rate, rx_pkt_rate, \
        tx_kbit_rate, tx_pkt_rate, ifAlias, ifPhysAddress in parsed:
        if ifOperStatus == "1": # up
            yield ifIndex, {}

def check_intracom_eth(item, params, parsed):
    for ifIndex, ifDescr, ifType, ifSpeed, ifOperStatus, rx_kbit_rate, rx_pkt_rate, \
        tx_kbit_rate, tx_pkt_rate, ifAlias, ifPhysAddress in parsed:
        if item == ifIndex:
            # TODO. Test for interface being down before calculating...
            speed = int(ifSpeed) if int(ifSpeed) == 0 else 100000000 
            speed_b = speed / 8
            rx_bit_rate = int(rx_kbit_rate) * 1024
            tx_bit_rate = int(tx_kbit_rate) * 1024
            rx_byte_rate = rx_bit_rate / 8
            tx_byte_rate = tx_bit_rate / 8

            infotext = "[%s] " % ifAlias

            state = 0
            infotext += "(%s)" % if_statename(ifOperStatus)

            if ifOperStatus != "1":
                infotext += "(!!) "
    
            if ifPhysAddress:
                infotext += 'MAC: %s, ' % if_render_mac_address(ifPhysAddress)

            if speed:
                infotext += "%s, " % get_nic_speed_human_readable(speed)

            if ifOperStatus == "2":
                yield 2, infotext

            rx_perc_used = 100.0 * rx_bit_rate / speed
            infotext += "in: %s(%.1f%%), " % (get_nic_speed_human_readable(rx_bit_rate), rx_perc_used)

            tx_perc_used = 100.0 * tx_bit_rate / speed
            infotext += "out: %s(%.1f%%), " % (get_nic_speed_human_readable(tx_bit_rate), tx_perc_used)

            perfdata = [("in",      "%f" % rx_byte_rate, None, None, 0, speed_b),
                        ("out",     "%f" % tx_byte_rate, None, None, 0, speed_b),
                        ("inpkts",  "%f" % int(rx_pkt_rate)),
                        ("outpkts", "%f" % int(tx_pkt_rate))]

            yield state, infotext, perfdata


check_info["intracom_eth"] = {
    "parse_function"         : parse_intracom_eth,
    "check_function"         : check_intracom_eth,
    "inventory_function"     : inventory_intracom_eth,
    "service_description"    : "Interface %s",
    "has_perfdata"           : True,
    "includes"               : [ "if.include" ],
    "snmp_info"              : [(".1.3.6.1", [
                                       "2.1.2.2.1.1",     # ifIndex
                                       "2.1.2.2.1.2",     # ifDescr
                                       "2.1.2.2.1.3",     # ifType
                                       "2.1.2.2.1.5",     # ifSpeed
                                       "2.1.2.2.1.8",     # ifOperStatus
                                BINARY("2.1.2.2.1.6"),    # ifPhysAddress
                                ]),
                                ( ".1.3.6.1.4.1.1807.65.1.3.1", [   # ICOM-ETHER-MIB::icomEthStatsTable
                                                "2",      # icomEthStatsTxBitRate
                                                "3",      # icomEthStatsRxBitRate
                                                "4",      # icomEthStatsTxPktRate
                                                "5",      # icomEthStatsRxPktRate
                                ])],
                               # Should pickup 1807.1.2.250, 1807.1.2.251, 1807.1.2.259 and 1807.1.2.274
    "snmp_scan_function"     : lambda oid: ".1.3.6.1.4.1.1807.1.2.2" in oid(".1.3.6.1.2.1.1.2.0"),
}

# Fin.

