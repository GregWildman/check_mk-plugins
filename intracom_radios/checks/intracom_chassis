#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# ENTITY-MIB::entityPhysical (1st row)
# .1.3.6.1.2.1.47.1.1.1.1.2.1 = STRING: "Base Band Unit"
# .1.3.6.1.2.1.47.1.1.1.1.7.1 = STRING: "bbu"
# .1.3.6.1.2.1.47.1.1.1.1.8.1 = STRING: "RDF7346.a"
# .1.3.6.1.2.1.47.1.1.1.1.9.1 = STRING: "5.13"
# .1.3.6.1.2.1.47.1.1.1.1.10.1 = STRING: "6.4.0_2302_R.1.12.2.build_03"
# .1.3.6.1.2.1.47.1.1.1.1.11.1 = STRING: "321411035726"
# .1.3.6.1.2.1.47.1.1.1.1.13.1 = STRING: "Z00-654/31.31"
#
# RFC1213-MIB::system
# .1.3.6.1.2.1.1.1.0 = STRING: OSDR-TS WiBAS IP card running Linux
# .1.3.6.1.2.1.1.4.0 = STRING: <<site id>>
# .1.3.6.1.2.1.1.5.0 = STRING: <<sector name>>
# .1.3.6.1.2.1.1.6.0 = STRING: <<geo coords>>
#
# ICOM-WMAC-CMN-MIB::icomWmacCmnStatusMacAddr
# .1.3.6.1.4.1.1807.110.1.1.1.2.1 = Hex-STRING: 00 05 59 72 67 AC
#
# ICOM-WPHY-MIB::icomWphyRfuStatusTable
# .1.3.6.1.4.1.1807.113.2.3.1.5.1 = Gauge32: 10637000
# .1.3.6.1.4.1.1807.113.2.3.1.6.1 = Gauge32: 10287000
# .1.3.6.1.4.1.1807.113.2.3.1.7.1 = INTEGER: 210
#
# ICOM-WPHY-MIB::icomWphyModemCfgTable
# .1.3.6.1.4.1.1807.113.2.4.1.5.1 = INTEGER: 2


# Should pickup 1807.1.2.250, 1807.1.2.251, 1807.1.2.259 and 1807.1.2.274
intracom_chassis_scan = lambda oid: ".1.3.6.1.4.1.1807.1.2.2" in oid(".1.3.6.1.2.1.1.2.0")

intracom_chassis_info = [(".1.3.6.1.2.1.47.1.1.1", [  # ENTITY-MIB::entityPhysical
                                "1.2",     # entPhysicalDescr
                                "1.7",     # entPhysicalName
                                "1.8",     # entPhysicalHardwareRev
                                "1.9",     # entPhysicalFirmwareRev
                                "1.10",    # entPhysicalSoftwareRev
                                "1.11",    # entPhysicalSerialNum
                                "1.13",    # entPhysicalModelName
                         ]),
                         # We are extracting the same info as used by the "snmp_info" check. To avoid
                         # duplicating this data create a rule to disable the "snmp_info" for
                         # Intracom radios.
                         (".1.3.6.1.2.1.1", [  # RFC1213-MIB::system
                                 "1.0",    # sysDescr
                                 "4.0",    # sysContact
                                 "5.0",    # sysName
                                 "6.0",    # sysLocation
                         ]),
                         (".1.3.6.1.4.1.1807.110.1.1.1.2", [  # ICOM-WMAC-CMN-MIB
                           BINARY("1"),    # icomWmacCmnStatusMacAddr
                         ]),
                         (".1.3.6.1.4.1.1807.113.2.3", [  # ICOM-WPHY-MIB::icomWphyRfuStatusTable
                                 "1.5",    # icomWphyRfuStatusTxFrequency
                                 "1.6",    # icomWphyRfuStatusRxFrequency
                                 "1.7",    # icomWphyRfuStatusTxPower
                         ]),
                         (".1.3.6.1.4.1.1807.113.2.4.1.5", [  # ICOM-WPHY-MIB::icomWphyModemCfgTable
                                   "1",    # icomWphyModemCfgBandwidth
                         ]),
                         (".1.3.6.1.2.1.1", [ "2" ]),   # SNMPv2-MIB::sysObjectID
                        ]


def intracom_chassis_render_mac_address(ifPhysAddress):
    if type(ifPhysAddress) != list:
        mac_bytes = map(ord, ifPhysAddress)
    else:
        mac_bytes = ifPhysAddress
    return (":".join(["%02s" % hex(m)[2:] for m in mac_bytes]).replace(" ", "0")).upper()

def inventory_intracom_chassis(info):
    for line in info[0]:
        descr, name, hw_rev, fw_rev, sw_rev, serial, model_name = line
        if descr == "Radio Transceiver Unit":
            yield "Radio", {}
        elif descr == "Base Band Unit":
            yield "Info", {}

def check_intracom_chassis(item, params, info):
    chassis_descr, site_id, site_name, geo_location = info[1][0]
    for line in info[0]:
        descr, name, hw_rev, fw_rev, sw_rev, serial, model_name = line
        if item == "Info" and descr == "Base Band Unit":
            map_chassis_type = {
                "250" : ("OSDR-PMP - TDMA-30 Base Station"),
                "251" : ("OSDR-PMP - TDMA-30 Terminal Station"),
                "259" : ("WiBAS-Connect-PMP - TDMA-60 Terminal Station"),
                "274" : ("OSDR-PMP - TDMA-60 Base Station"),
            }
            mac = info[2][0][0]
            object_id = info[5][0][0].split(".")[-1]
            
            infotext = "Type: %s, Serial: %s, MAC: %s, ID: %s (%s)" % \
                       (map_chassis_type.get(object_id, "Unknown"), serial, intracom_chassis_render_mac_address(mac), site_id, site_name)

            return 0, infotext


        elif item == "Radio" and descr == "Radio Transceiver Unit":
            tx_freq_raw, rx_freq_raw, tx_power_raw = info[3][0] 
            bw = info[4][0][0]
            map_bandwidth = {
                  "1": "7MHz",
                  "2": "14MHz",
                  "3": "28MHz",
                  "4": "56MHz",
                  "5": "10MHz",
                  "6": "20MHz",
                  "7": "30MHz",
                  "8": "40MHz",
                  "9": "50MHz",
            }
            tx_freq = float(tx_freq_raw) / 1000.00
            rx_freq = float(rx_freq_raw) / 1000.00
            tx_power = float(tx_power_raw) / 10.0
            infotext = "TX Freq: %.2f MHz, RX Freq: %.2f MHz, TX Power: %.1f dBm, BW: %s" % \
                       (tx_freq, rx_freq, tx_power, map_bandwidth.get(bw, "unknown"))
            perfdata = [("output_power", "%.1fdBm" % tx_power)]

            return 0, infotext, perfdata

   
check_info["intracom_chassis"] = {
    "inventory_function"        : inventory_intracom_chassis,
    "check_function"            : check_intracom_chassis,
    "service_description"       : "Chassis %s",
    "has_perfdata"              : True,
    "snmp_info"                 : intracom_chassis_info,
    "snmp_scan_function"        : intracom_chassis_scan,
}

# Fin.

