#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# ICOM-WPHY-MIB::icomWphyModemLinkStatusTable
# .1.3.6.1.4.1.1807.113.2.11.1.7.1.1 = INTEGER: 2
# .1.3.6.1.4.1.1807.113.2.11.1.8.1.1 = Hex-STRING: 08 00 
# .1.3.6.1.4.1.1807.113.2.11.1.10.1.1 = INTEGER: 1
# .1.3.6.1.4.1.1807.113.2.11.1.11.1.1 = Hex-STRING: 00 

# Should pickup 1807.1.2.250, 1807.1.2.251, 1807.1.2.259 and 1807.1.2.274
intracom_alarm_scan = lambda oid: ".1.3.6.1.4.1.1807.1.2.2" in oid(".1.3.6.1.2.1.1.2.0") and \
                              oid(".1.3.6.1.4.1.1807.111.1.1.1.2.1") != None

intracom_alarm_info = ( ".1.3.6.1.4.1.1807.113.2.11", [   # ICOM-WPHY-MIB
                                       "1.7",      # icomWphyModemLinkStatusModemAlarmStat
                                       "1.8",      # icomWphyModemLinkStatusModemCurAlarmInfo
                                      "1.10",      # icomWphyModemLinkStatusThresAlarmState
                                      "1.11",      # icomWphyModemLinkStatusThresCurAlarmInfo
                     ])

def inventory_intracom_alarm(info):
    if len(info[0]) > 0:
        yield None, {}

def check_intracom_alarm(item, params, info):
    modem_alarm, modem_alarm_info, threshold_alarm, threshold_alarm_info = info[0]
    alarm_cnt = 0

    # First up, the modem alarm(s)
    # none (1), yellow (2), red (3)
    state = int(modem_alarm) - 1
    if state:
        map_alarm = {
            0: "frameSyncUnlock",
            1: "symbolTimingUnlock",
            2: "fecCtrlZoneUnlock",
            3: "fecUnlock",
            4: "agcUnlock",
            5: "mseAlarm",
            6: "fecAlarm",
            7: "berCorrectedAlarm",
            8: "berUncorrectedAlarm",
        }

        alarm_info = int(modem_alarm_info.encode('hex'), 16)
        alarmtext = []
        alarm_cnt = 0
        # Test each bit for triggered alarm
        # 1000000000000000 (binary) = 32768 (Decimal)
        for i in range(0, 16):
            if alarm_info & (32768 >> i):
                alarmtext += [map_alarm.get(i, "unknown")]
                alarm_cnt += 1
        
        yield state, "Modem: %d" % alarm_cnt
        yield 0, ", ".join(alarmtext)

    # Second, the threshold alarm(s)
    # noAlarm (1), alarm (2)
    state = int(threshold_alarm) - 1
    if state:
        map_alarm = {
            0: "rssi",
            1: "snr",
            2: "fecStress",
        }

        alarm_info = int(threshold_alarm_info.encode('hex'), 8)
        alarmtext = []
        alarm_cnt = 0
        # Test each bit for triggered alarm
        # 10000000 (binary) = 128 (Decimal)
        for i in range(0, 8):
            if alarm_info & (128 >> i):
                alarmtext += [map_alarm.get(i, "unknown")]
                alarm_cnt += 1
        
        yield state, "  Threshold: %d" % alarm_cnt
        yield 0, ", ".join(alarmtext)


    # No alarms present, signal all is good.
    if alarm_cnt == 0:
        yield 0, "All Clear"

check_info["intracom_alarm"] = {
    "check_function"            : check_intracom_alarm,
    "inventory_function"        : inventory_intracom_alarm,
    "service_description"       : "Alarm",
    "snmp_info"                 : intracom_alarm_info,
    "snmp_scan_function"        : intracom_alarm_scan,
}

# Fin.

