#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# ICOM-WMAC-BS-MIB::icomWmacBsTsCfgTable
# .1.3.6.1.4.1.1807.112.1.3.1.3.1.2 = Hex-STRING: 00 05 59 6D 8F CA 
#
# ICOM-WMAC-BS-MIB::icomWmacBsObjects
# .1.3.6.1.4.1.1807.112.1.4.1.1.1.2 = INTEGER: 5
# .1.3.6.1.4.1.1807.112.1.4.1.2.1.2 = INTEGER: 4
# .1.3.6.1.4.1.1807.112.1.4.1.3.1.2 = Timeticks: (809127446) 93 days, 15:34:34.46
# .1.3.6.1.4.1.1807.112.1.4.1.4.1.2 = Timeticks: (829273810) 95 days, 23:32:18.10
# .1.3.6.1.4.1.1807.112.1.4.1.5.1.2 = INTEGER: 7
# .1.3.6.1.4.1.1807.112.1.4.1.6.1.2 = INTEGER: 6
# .1.3.6.1.4.1.1807.112.1.4.1.7.1.2 = INTEGER: 1785
# .1.3.6.1.4.1.1807.112.1.4.1.8.1.2 = INTEGER: 300
# .1.3.6.1.4.1.1807.112.1.4.1.9.1.2 = INTEGER: -7211
# .1.3.6.1.4.1.1807.112.1.4.1.10.1.2 = INTEGER: 2797
# .1.3.6.1.4.1.1807.112.1.4.1.11.1.2 = INTEGER: 2095
# .1.3.6.1.4.1.1807.112.1.4.1.12.1.2 = INTEGER: -7876
# .1.3.6.1.4.1.1807.112.1.4.1.13.1.2 = INTEGER: 2585
# .1.3.6.1.4.1.1807.112.1.4.1.14.1.2 = INTEGER: 2493
# .1.3.6.1.4.1.1807.112.1.4.1.15.1.2 = INTEGER: 2
# .1.3.6.1.4.1.1807.112.1.4.1.16.1.2 = INTEGER: 1
# .1.3.6.1.4.1.1807.112.1.4.1.17.1.2 = STRING: "10.12.7.12"
# .1.3.6.1.4.1.1807.112.1.4.1.18.1.2 = STRING: "255.255.255.0"
# .1.3.6.1.4.1.1807.112.1.4.1.19.1.2 = Gauge32: 55
# .1.3.6.1.4.1.1807.112.1.4.1.20.1.2 = INTEGER: 5052

# Should pickup 1807.1.2.250, 1807.1.2.251, 1807.1.2.259 and 1807.1.2.274
intracom_bsts_scan = lambda oid: ".1.3.6.1.4.1.1807.1.2.2" in oid(".1.3.6.1.2.1.1.2.0") and \
                             oid(".1.3.6.1.4.1.1807.112.1.9.0") != None


intracom_bsts_info = ( ".1.3.6.1.4.1.1807.112.1", [   # ICOM-WMAC-BS-MIB::icomWmacBsObjects
                                     OID_END,            # index            0
                                     "4.1.1",            # Connectivity     1
                                     "4.1.3",            # Uptime           2
                                     "4.1.4",            # LastEntryTime    3
                                     "4.1.5",            # Dluc             4
                                     "4.1.6",            # Uluc             5
                                     "4.1.9",            # DlRssi           6
                                     "4.1.10",           # DlSnr            7
                                     "4.1.12",           # UlRssi           8
                                     "4.1.13",           # UlSnr            9
                                     "4.1.17",           # IpAddress       10
                                     "4.1.20",           # Distance        11
                              BINARY("3.1.3"),           # MacAddress      12
                              ]
                     )


def intracom_render_mac_address(ifPhysAddress):
    if type(ifPhysAddress) != list:
        mac_bytes = map(ord, ifPhysAddress)
    else:
        mac_bytes = ifPhysAddress
    return (":".join(["%02s" % hex(m)[2:] for m in mac_bytes]).replace(" ", "0")).upper()


def parse_intracom_bsts(info):
    parsed = []
    for line in info:
        ts_index = int(line[0].split(".")[1])
        parsed.append( [ "%02d" % ts_index ] + line[1:] )

    return parsed

def inventory_intracom_bsts(info):
    parsed = parse_intracom_bsts(info)
    for line in parsed:
        yield line[0], {}

def check_intracom_bsts(item, params, info):
    parsed = parse_intracom_bsts(info)
    perfdata = []
    state = 0
    map_state = {
       "1": ("initialization"),
       "2": ("ranging"),
       "3": ("rangingSucess"),
       "4": ("removeReq"),
       "5": ("connected"),
       "6": ("ranged"),
       "7": ("invalid"),
    }
    map_mode = {
       "1": ("4ql"),
       "2": ("4q"),
       "3": ("4qh"),
       "4": ("16ql"),
       "5": ("16qh"),
       "6": ("64q"),
       "7": ("128q"),
       "8": ("256q"),
       "9": ("512q"),
      "10": ("1024ql"),
      "11": ("1024qh"),
    }

    for ts_idx, conn_state, uptime, last_time, dl_uc, ul_uc, dl_rssi_raw, dl_snr, ul_rssi_raw, \
        ul_snr, ip, distance, mac_raw in parsed:
        if item == ts_idx:
            dl_rssi = float(dl_rssi_raw) / 100
            ul_rssi = float(ul_rssi_raw) / 100
            # You would think?. Welcome to shoddy ISP.
            #if conn_state != "5":
            #    state = 1

            infotext = "%s, IP: %s, MAC: %s, dl: %s  ul: %s, RSSI (dBm) dl: %.2f ul: %.2f, Distance: %dm" % \
                   (map_state.get(conn_state), ip, intracom_render_mac_address(mac_raw),
                    map_mode.get(dl_uc), map_mode.get(ul_uc), dl_rssi, ul_rssi, int(distance)) 
            perfdata = [("output_power", "%.1fdBm" % dl_rssi), ("input_power", "%.1fdBm" % ul_rssi)]
            return (state, infotext, perfdata)

    return (3, "No such terminal found, decommissioned ?")

check_info["intracom_bsts"] = {
    "check_function"            : check_intracom_bsts,
    "inventory_function"        : inventory_intracom_bsts,
    "service_description"       : "TS %s",
    "has_perfdata"              : True,
    "snmp_info"                 : intracom_bsts_info,
    "snmp_scan_function"        : intracom_bsts_scan,
}

# Fin.

