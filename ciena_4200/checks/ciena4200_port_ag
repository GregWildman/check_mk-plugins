#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.3.1.1.1 = INTEGER: 12
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.6.1.1.1 = STRING: "WM2IR0WBAA"
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.7.1.1.1 = INTEGER: 2
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.8.1.1.1 = INTEGER: 2
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.9.1.1.1 = STRING: "850 nm"
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.20.1.1.1 = STRING: "-4.50 dBm"
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.21.1.1.1 = STRING: "-7.43 dBm"
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.48.1.1.1 = STRING: "CIENA"
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.49.1.1.1 = STRING: "PEN4W12         "
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.50.1.1.1 = STRING: "C "
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.51.1.1.1 = STRING: "OPT-SX"
# .1.3.6.1.4.1.7737.7.2.9.2.1.8.1.1.52.1.1.1 = STRING: "700-1016-001"

ciena4200_port_ag_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7737.5")

ciena4200_port_ag_info = ( ".1.3.6.1.4.1.7737.7.2.9.2.1.8.1", [   # IPI-GSLAMAG-MIB::gslamAGPortTable
                                        "1.2",        # gslamAGPortIfIndex
                                        "1.3",        # gslamAGPortType
                                        "1.6",        # gslamAGPortCLEI
                                        "1.7",        # gslamAGPortPrimaryState
                                        "1.8",        # gslamAGPortSecondaryState
                                        "1.9",        # gslamAGPortWavelength
                                       "1.20",        # gslamAGPortTxOptPower
                                       "1.21",        # gslamAGPortRxOptPower
                                       "1.48",        # gslamAGPortHWManufactureName
                                       "1.49",        # gslamAGPortHWManufactureSerial
                                       "1.50",        # gslamAGPortHWRevision
                                       "1.51",        # gslamAGPortHWManufacturePartName
                                       "1.52",        # gslamAGPortHWManufacturePartNumber
                       ])

def inventory_ciena4200_port_ag(info):
    inventory = []
    for if_idx, port_type, clei, primary_state, secondary_state, wavelength, tx_power, rx_power, \
        man_name, man_serial, hw_rev, part_name, part_number in info:
        if primary_state == "2":  # is-nr

            # As the cheap SFP's do not provide valid thresholds we will be ignorning them.
            # The warn/crit values are decided from the RX dBm level at inventory time, as per NOC
            # they want to be notified if more that 2dB change. We will warn after 1.5dB - Greg.
            if rx_power in {"LOS", "OOS", "N/A"}:
                rxdbm = 0.0
            else:
                rxdbm = float(rx_power.split(" ")[0])
            if tx_power in {"LOS", "OOS", "N/A"}:
                txdbm = 0.0
            else:
                txdbm = float(tx_power.split(" ")[0])

            rxlow_warn  = float(rxdbm) - 1.5
            rxlow_crit  = float(rxdbm) - 2.0
            rxhigh_warn = float(rxdbm) + 1.5
            rxhigh_crit = float(rxdbm) + 2.0

            txlow_warn  = float(txdbm) - 1.5
            txlow_crit  = float(txdbm) - 2.0
            txhigh_warn = float(txdbm) + 1.5
            txhigh_crit = float(txdbm) + 2.0

            inventory.append(("%d" % saveint(if_idx),
                             {"rx_levels": (rxlow_warn, rxlow_crit, rxhigh_warn, rxhigh_crit),
                              "tx_levels": (txlow_warn, txlow_crit, txhigh_warn, txhigh_crit),
                              "rx_initial_scan": rxdbm,
                              "tx_initial_scan": txdbm} ))

    return inventory

def check_ciena4200_port_ag(item, params, info):
    map_state = {
       "1": ("unknown"),
       "2": ("In-Service and Normal"),
       "3": ("Out-of-Service and Autonomous"),
       "4": ("Out-of-Service and Management"),
       "5": ("Out-of-Service and Autonomous Management"),
    }
    state = 0
    infotext = ""
    perfdata = {}

    for if_idx, port_type, clei, primary_state, secondary_state, wavelength, tx_power, rx_power, \
        man_name, man_serial, hw_rev, part_name, part_number in info:
        if item == "%d" % saveint(if_idx): 
            
            if rx_power in {"LOS", "OOS", "N/A"}:
                rxdbm = 0.0
            else:
                rxdbm = float(rx_power.split(" ")[0])
            if tx_power in {"LOS", "OOS", "N/A"}:
                txdbm = 0.0
            else:
                txdbm = float(tx_power.split(" ")[0])

            rx_inv_dbm = params.get("rx_initial_scan")
            tx_inv_dbm = params.get("tx_initial_scan")
            rxlow_warn, rxlow_crit, rxhigh_warn, rxhigh_crit = params.get("rx_levels")
            txlow_warn, txlow_crit, txhigh_warn, txhigh_crit = params.get("tx_levels")

            infotext = "%s (%s), %s %s, %s, Input Power: %.1f, Output Power: %.1f" % \
                             (man_name, man_serial.rstrip(" "), part_name, part_number, wavelength, rxdbm, txdbm)
            perfdata = [ ("input_power", "%.1fdBm" % rxdbm,
                              "%.1f:%.1f" % (rxlow_warn, rxhigh_warn),
                              "%.1f:%.1f" % (rxlow_crit, rxhigh_crit) ),
                         ("output_power", "%.1fdBm" % txdbm,
                              "%.1f:%.1f" % (txlow_warn, txhigh_warn),
                              "%.1f:%.1f" % (txlow_crit, txhigh_crit) ) ]

            if primary_state != "2":
                state = 2

            if rxdbm <= rxlow_crit:
                infotext += ", (Low threshold: %.1f dBm)" % rxlow_crit
                state = 2
            elif rxdbm <= rxlow_warn:
                infotext += ", (Low threshold: %.1f dBm)" % rxlow_warn
                state = 1
            elif rxdbm >= rxhigh_crit:
                infotext += ", (High threshold: %.1f dBm)" % rxhigh_crit
                state = 2
            elif rxdbm >= rxhigh_warn:
                infotext += ", (High threshold: %.1f dBm)" % rxhigh_warn
                state = 1

            return (state, infotext, perfdata)

check_info["ciena4200_port_ag"] = {
    "inventory_function"        : inventory_ciena4200_port_ag,
    "check_function"            : check_ciena4200_port_ag,
    "service_description"       : "GSLAM-AG %s",
    "has_perfdata"              : True,
    "snmp_info"                 : ciena4200_port_ag_info,
    "snmp_scan_function"        : ciena4200_port_ag_scan,
}

# Fin.

