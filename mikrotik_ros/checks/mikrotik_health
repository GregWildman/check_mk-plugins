#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# SNMPv2-SMI::enterprises.14988.1.1.3.9.0  = STRING: "n/a"
# SNMPv2-SMI::enterprises.14988.1.1.3.10.0 = INTEGER: 490
# SNMPv2-SMI::enterprises.14988.1.1.3.11.0 = INTEGER: 280
# SNMPv2-SMI::enterprises.14988.1.1.3.12.0 = INTEGER: 98
# SNMPv2-SMI::enterprises.14988.1.1.3.14.0 = INTEGER: 800
# SNMPv2-SMI::enterprises.14988.1.1.3.17.0 = INTEGER: 3900
# SNMPv2-SMI::enterprises.14988.1.1.3.18.0 = INTEGER: 3870

mikrotik_health_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.14988.1")

mikrotik_health_info = (".1.3.6.1.4.1.14988.1.1.3", [   # MIKROTIK.MIB::mtxrHealth
                                  "5.0",    # mtxrHlSensorTemperature
                                  "6.0",    # mtxrHlCpuTemperature
                                  "7.0",    # mtxrHlBoardTemperature
                                  "8.0",    # mtxrHlVoltage
                                  "9.0",    # mtxrHlActiveFan
                                 "10.0",    # mtxrHlTemperature
                                 "11.0",    # mtxrHlProcessorTemperature
                                 "12.0",    # mtxrHlPower
                                 "13.0",    # mtxrHlCurrent
                                 "14.0",    # mtxrHlProcessorFrequency
                                 "15.0",    # mtxrHlPowerSupplyState
                                 "16.0",    # mtxrHlBackupPowerSupplyState
                                 "17.0",    # mtxrHlFanSpeed1
                                 "18.0",    # mtxrHlFanSpeed2
                         ])

#.
#   .--Temperature---------------------------------------------------------.
#   |     _____                                   _                        |
#   |    |_   _|__ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |      | |/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |      | |  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      |_|\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   '----------------------------------------------------------------------'

factory_settings["mikrotik_health_temp_default_levels"] = {
    "levels" : (50, 60),
}

def inventory_mikrotik_health_temp(info):
    for sensor_temp, cpu_temp, board_temp, voltage, active_fan, chassis_temp, proc_temp, \
        power, current, freq, psu_state, backup_psu_state, fan1_speed, fan2_speed in info:
        if sensor_temp != "":
            yield "Sensor", {}
        if cpu_temp != "":
            yield "CPU", {}
        if board_temp != "":
            yield "Board", {}
        if chassis_temp != "":
            yield "Chassis", {}
        if proc_temp != "":
            yield "Processor", {}

def check_mikrotik_health_temp(item, params, info):
    for sensor_temp, cpu_temp, board_temp, voltage, active_fan, chassis_temp, proc_temp, \
        power, current, freq, psu_state, backup_psu_state, fan1_speed, fan2_speed in info:
        if item == "Sensor":
            temp = float(sensor_temp) / 10.0
        elif item == "CPU":
            temp = float(cpu_temp) / 10.0
        elif item == "Board":
            temp = float(board_temp) / 10.0
        elif item == "Chassis":
            temp = float(chassis_temp) / 10.0
        elif item == "Processor":
            temp = float(proc_temp) / 10.0
            
        return check_temperature(temp, params, "mikrotik_health_temp_%s" % item)


check_info["mikrotik_health.temp"] = {
    "inventory_function"        : inventory_mikrotik_health_temp,
    "check_function"            : check_mikrotik_health_temp,
    "service_description"       : 'Temperature %s',
    'group'                     : 'temperature',
    'has_perfdata'              : True,
    "snmp_info"                 : mikrotik_health_info,
    "snmp_scan_function"        : mikrotik_health_scan,
    'includes'                  : [ "temperature.include" ],
    'default_levels_variable'   : 'mikrotik_health_temp_default_levels',
}

#.
#   .--Chassis Volt.-------------------------------------------------------.
#   |         ____ _                   _      __     __    _ _             |
#   |        / ___| |__   __ _ ___ ___(_)___  \ \   / /__ | | |_           |
#   |       | |   | '_ \ / _` / __/ __| / __|  \ \ / / _ \| | __|          |
#   |       | |___| | | | (_| \__ \__ \ \__ \   \ V / (_) | | |_ _         |
#   |        \____|_| |_|\__,_|___/___/_|___/    \_/ \___/|_|\__(_)        |
#   |                                                                      |
#   '----------------------------------------------------------------------'


factory_settings["mikrotik_health_voltage_default_levels"] = {
    "levels_lower" : (11.0, 10.5),
    "levels_upper" : (28.0, 30.0),
}

def inventory_mikrotik_health_voltage(info):
    for sensor_temp, cpu_temp, board_temp, raw_voltage, active_fan, chassis_temp, proc_temp, \
        power, current, freq, psu_state, backup_psu_state, fan1_speed, fan2_speed in info:
        if raw_voltage != "":
            yield "PSU_IN", {}

def check_mikrotik_health_voltage(item, params, info):
    for sensor_temp, cpu_temp, board_temp, raw_voltage, active_fan, chassis_temp, proc_temp, \
        power, current, freq, psu_state, backup_psu_state, fan1_speed, fan2_speed in info:
        if raw_voltage == "":
            yield 3, "Chassis voltage info not available"
        else:
            voltage = float(raw_voltage) / 10.0
            yield 0, "%s: %.2f V" % ("Input", voltage), [("in_voltage", voltage)]

            warn_lower, crit_lower = params["levels_lower"]
            if voltage <= crit_lower:
                yield 2, "too low (warn/crit at or below %.2f/%.2f V)" % params["levels_lower"]
            elif voltage <= warn_lower:
                yield 1, "too low (warn/crit at or below %.2f/%.2f V)" % params["levels_lower"]

            warn_upper, crit_upper = params["levels_upper"]
            if voltage >= crit_upper:
                yield 2, "too high (warn/crit at or above %.2f/%.2f V)" % params["levels_upper"]
            elif voltage >= warn_upper:
                yield 1, "too high (warn/crit at or above %.2f/%.2f V)" % params["levels_upper"]


check_info["mikrotik_health.voltage"] = {
    "inventory_function"        : inventory_mikrotik_health_voltage,
    "check_function"            : check_mikrotik_health_voltage,
    "service_description"       : 'Voltage %s',
    'has_perfdata'              : True,
    "snmp_info"                 : mikrotik_health_info,
    "snmp_scan_function"        : mikrotik_health_scan,
    'default_levels_variable'   : 'mikrotik_health_voltage_default_levels',
}

#.
#   .--fan-----------------------------------------------------------------.
#   |                            __                                        |
#   |                           / _| __ _ _ __                             |
#   |                          | |_ / _` | '_ \                            |
#   |                          |  _| (_| | | | |                           |
#   |                          |_|  \__,_|_| |_|                           |
#   |                                                                      |
#   +----------------------------------------------------------------------+

def inventory_mikrotik_health_fan(info):
    for sensor_temp, cpu_temp, board_temp, raw_voltage, active_fan, chassis_temp, proc_temp, \
        power, current, freq, psu_state, backup_psu_state, fan1_speed, fan2_speed in info:
        # Speed can be '0'
        if fan1_speed:
            yield "1", {}
        if fan2_speed:
            yield "2", {}

def check_mikrotik_health_fan(item, params, info):
    fan_speed = [0,0,0]
    for sensor_temp, cpu_temp, board_temp, raw_voltage, active_fan, chassis_temp, proc_temp, \
        power, current, freq, psu_state, backup_psu_state, fan_speed[1], fan_speed[2] in info:
        if item == "1" or item == "2":
            rpm = int(fan_speed[int(item)])

            perfdata = []
            if params.get("output_metrics"):
                perfdata = [ ("fan", rpm)]

            status = 0
            if rpm > 0:
                infotext = "Speed at %d RPM" % (rpm)
            else:
                infotext = "Fan is currently off"

            yield status, infotext, perfdata

check_info["mikrotik_health.fan"] = {
    "inventory_function"      : inventory_mikrotik_health_fan,
    "check_function"          : check_mikrotik_health_fan,
    "service_description"     : "Fan %s",
    "snmp_info"               : mikrotik_health_info,
    "snmp_scan_function"      : mikrotik_health_scan,
    "has_perfdata"            : True,
    "group"                   : "hw_fans",
}

#.
#   .--Power Usage---------------------------------------------------------.
#   |       ____                          _   _                            |
#   |      |  _ \ _____      _____ _ __  | | | |___  __ _  __ _  ___       |
#   |      | |_) / _ \ \ /\ / / _ \ '__| | | | / __|/ _` |/ _` |/ _ \      |
#   |      |  __/ (_) \ V  V /  __/ |    | |_| \__ \ (_| | (_| |  __/      |
#   |      |_|   \___/ \_/\_/ \___|_|     \___/|___/\__,_|\__, |\___|      |
#   |                                                     |___/            |
#   '----------------------------------------------------------------------'

def inventory_mikrotik_health_power(info):
    for sensor_temp, cpu_temp, board_temp, raw_voltage, active_fan, chassis_temp, proc_temp, \
        power, current, freq, psu_state, backup_psu_state, fan1_speed, fan2_speed in info:
        if power != "":
            yield None, {}

def check_mikrotik_health_power(item, _no_params, info):
    for sensor_temp, cpu_temp, board_temp, raw_voltage, active_fan, chassis_temp, proc_temp, \
        power, current, freq, psu_state, backup_psu_state, fan1_speed, fan2_speed in info:

        watts = savefloat(power) / 10
        infotext = "Power: %.1f W" % watts
        perfdata = [("power" , "%.1fWatt" % watts)]
 
        return 0, infotext, perfdata

check_info["mikrotik_health.power"] = {
    "inventory_function"      : inventory_mikrotik_health_power,
    "check_function"          : check_mikrotik_health_power,
    "service_description"     : "Chassis Power",
    "has_perfdata"            : True,
    "snmp_info"               : mikrotik_health_info,
    "snmp_scan_function"      : mikrotik_health_scan,
}

# Fin.

