#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# GAMMATRONIC-MIB::psACInput
# .1.3.6.1.4.1.6050.1.5.1.0 = INTEGER: 229
# .1.3.6.1.4.1.6050.1.5.7.0 = INTEGER: 5000

gamatronic_in_voltage_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.6050"

gamatronic_in_voltage_info = (".1.3.6.1.4.1.6050.1.5", [ #  GAMMATRONIC-MIB::psACInput
                               "1.0",    # psACInputVoltage1
                               "7.0",    # psACInputFrequency
                             ])

ups_in_voltage_default_levels = (210, 180) # warning / critical

def inventory_gamatronic_in_voltage_info(info):
    if len(info[0]) > 0:
        yield None, ups_in_voltage_default_levels

def check_gamatronic_in_voltage_info(item, params, info):
    voltage, freq = info[0]
    warn, crit = params
    infotext = "in voltage: %sV, (warn/crit at %dV/%dV)" % (voltage, warn, crit)
    perfdata = [("voltage", int(voltage), warn, crit),
                ("frequency", float(freq) * 100)]
    return 0, infotext, perfdata

check_info["gamatronic_in_voltage"] = {
    "inventory_function"        : inventory_gamatronic_in_voltage_info,
    "check_function"            : check_gamatronic_in_voltage_info,
    "service_description"       : 'AC Mains',
    "has_perfdata"              : True,
    "snmp_info"                 : gamatronic_in_voltage_info,
    "snmp_scan_function"        : gamatronic_in_voltage_scan,

}

# Fin.

