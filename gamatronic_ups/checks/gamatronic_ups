#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# GAMMATRONIC-MIB::psUnit
# .1.3.6.1.4.1.6050.1.1.1.0 = STRING: "OR ADIR"
# .1.3.6.1.4.1.6050.1.1.2.0 = STRING: "Gamatronic"
# .1.3.6.1.4.1.6050.1.1.3.0 = STRING: "YUASA"
# .1.3.6.1.4.1.6050.1.1.4.0 = STRING: "50-6"
# .1.3.6.1.4.1.6050.1.1.5.0 = STRING: "SC1006"
# .1.3.6.1.4.1.6050.1.1.6.0 = STRING: "abc"
# .1.3.6.1.4.1.6050.1.1.7.0 = STRING: "SNMP"
# .1.3.6.1.4.1.6050.1.1.8.0 = STRING: "83-06-06-15"
#
# GAMMATRONIC-MIB::psBattery
# .1.3.6.1.4.1.6050.1.2.2.0 = INTEGER: 5243
# .1.3.6.1.4.1.6050.1.2.3.0 = INTEGER: 1
# .1.3.6.1.4.1.6050.1.2.5.0 = INTEGER: 132
# .1.3.6.1.4.1.6050.1.2.12.0 = INTEGER: 0
#
# GAMMATRONIC-MIB::psBatteryTable
# .1.3.6.1.4.1.6050.1.2.26.1.1.1 = INTEGER: 1
# .1.3.6.1.4.1.6050.1.2.26.1.2.1 = INTEGER: 0
# .1.3.6.1.4.1.6050.1.2.26.1.3.1 = INTEGER: 0
# .1.3.6.1.4.1.6050.1.2.26.1.4.1 = INTEGER: 0
# .1.3.6.1.4.1.6050.1.2.26.1.5.1 = INTEGER: 43
# .1.3.6.1.4.1.6050.1.2.26.1.6.1 = INTEGER: 30
#
# GAMMATRONIC-MIB::psACInput
# .1.3.6.1.4.1.6050.1.5.1.0 = INTEGER: 230
# .1.3.6.1.4.1.6050.1.5.7.0 = INTEGER: 5000
#
# GAMMATRONIC-MIB::psDCOutput
# .1.3.6.1.4.1.6050.1.6.1.0 = INTEGER: 5243
# .1.3.6.1.4.1.6050.1.6.2.0 = INTEGER: 2295
# .1.3.6.1.4.1.6050.1.6.3.0 = INTEGER: 0
# .1.3.6.1.4.1.6050.1.6.4.0 = INTEGER: 2332

gamatronics_ups_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.6050"

gamatronics_ups_info = [(".1.3.6.1.4.1.6050.1.1", [ #  GAMMATRONIC-MIB::psUnit
                               "1.0",    # psUnitSysName
                               "2.0",    # psUnitManufacture
                               "3.0",    # psUnitBatteryType
                               "4.0",    # psUnitPSType
                               "5.0",    # psUnitControllerType
                               "6.0",    # psUnitSoftwareVersion
                               "7.0",    # psUnitComProtocolVersion
                               "8.0",    # psUnitSerialNumber
                          ]),
                         (".1.3.6.1.4.1.6050.1.2", [ #  GAMMATRONIC-MIB::psBattery
                               "2.0",    # psBatteryVoltage
                               "3.0",    # psBatteryTestStatus
                               "5.0",    # psBatteryActualCapacity
                              "12.0",    # psBatteryChargeMode
                          ]),
                         (".1.3.6.1.4.1.6050.1.2.26", [ #  GAMMATRONIC-MIB::psBatteryTable
                               "1.1",  # psBatteryIndex
                               "1.2",  # psBatteryCurrentDirection
                               "1.3",  # psBatteryCurrent
                               "1.4",  # psBatteryTemperatureSign
                               "1.5",  # psBatteryTemperature
                               "1.6",  # psBatteryStatus
                          ]),
                         (".1.3.6.1.4.1.6050.1.5", [ #  GAMMATRONIC-MIB::psACInput
                               "1.0",    # psACInputVoltage1
                               "7.0",    # psACInputFrequency
                          ]),
                         (".1.3.6.1.4.1.6050.1.6", [ #  GAMMATRONIC-MIB::psDCOutput
                               "1.0",    # psDCoutputVoltage
                               "2.0",    # psDCoutputCurrent1
                               "3.0",    # psDCoutputCurrent2
                               "4.0",    # psDCoutputCurrent3
                          ]),
                     ]

#.
#   .--info----------------------------------------------------------------.
#   |                           _        __                                |
#   |                          (_)_ __  / _| ___                           |
#   |                          | | '_ \| |_ / _ \                          |
#   |                          | | | | |  _| (_) |                         |
#   |                          |_|_| |_|_|  \___/                          |
#   |                                                                      |
#   +----------------------------------------------------------------------+

def inventory_gamatronics_ups_info(info):
    chassis_info = info[0]  # psUnit
    if len(chassis_info) > 0:
            yield None, {}

def check_gamatronics_ups_info(item, params, info):
    chassis_info = info[0]  # psUnit
    sys_name, manufacture, bat_type, ps_type, controller_type, sw_ver, \
        proto_ver, serial = chassis_info[0]

    infotext = "Type: %s (%s), Serial: %s, Batt: %s, Power Supply: %s" % \
               (controller_type, sys_name, serial, bat_type, ps_type)
    return 0, infotext


check_info["gamatronics_ups.info"] = {
    "inventory_function"        : inventory_gamatronics_ups_info,
    "check_function"            : check_gamatronics_ups_info,
    "service_description"       : 'Chassis Info',
    "snmp_info"                 : gamatronics_ups_info,
    "snmp_scan_function"        : gamatronics_ups_scan,

}

#.
#   .--battery-------------------------------------------------------------.
#   |                  ____        _   _                                   |
#   |                 | __ )  __ _| |_| |_ ___ _ __ _   _                  |
#   |                 |  _ \ / _` | __| __/ _ \ '__| | | |                 |
#   |                 | |_) | (_| | |_| ||  __/ |  | |_| |                 |
#   |                 |____/ \__,_|\__|\__\___|_|   \__, |                 |
#   |                                               |___/                  |
#   +----------------------------------------------------------------------+

def inventory_gamatronics_ups_battery(info):
    battery_info = info[1]  # psBattery 
    if len(battery_info) > 0:
            yield None, {}

def check_gamatronics_ups_battery(item, _no_params, info):
    map_mode = {
       "0": ("floating"),
       "1": ("equalizes"),
    }

    battery_info = info[1]  # psBattery
    voltage_raw, test_status, capacity, charge_mode = battery_info[0]
    voltage = float(voltage_raw) / 100.0
    infotext = "Charge Mode: %s, Capacity: %sAh, Voltage: %.2fV" % \
               (map_mode.get(charge_mode), capacity, voltage)

    return 0, infotext

check_info["gamatronics_ups.battery"] = {
    "inventory_function"        : inventory_gamatronics_ups_battery,
    "check_function"            : check_gamatronics_ups_battery,
    "service_description"       : 'Battery',
    "snmp_info"                 : gamatronics_ups_info,
    "snmp_scan_function"        : gamatronics_ups_scan,

}

#   .--temp----------------------------------------------------------------.
#   |                       _                                              |
#   |                      | |_ ___ _ __ ___  _ __                         |
#   |                      | __/ _ \ '_ ` _ \| '_ \                        |
#   |                      | ||  __/ | | | | | |_) |                       |
#   |                       \__\___|_| |_| |_| .__/                        |
#   |                                        |_|                           |
#   +----------------------------------------------------------------------+

factory_settings["gamatronics_ups_temp_default_levels"] = {
    "levels": (70, 80),
}

def inventory_gamatronics_ups_temp(info):
    battery_table = info[2]
    for idx, current_direction, current, temp_sign, temp_raw, batt_status in battery_table:
        if idx != "":
            yield idx, {}

def check_gamatronics_ups_temp(item, params, info):
    battery_table = info[2]
    for idx, current_direction, current, temp_sign, temp_raw, batt_status in battery_table:
        if item == idx:
            if temp_raw == "":
                yield 3, "Battery temperature info not available"

            temp = float("%s%s" % (temp_sign,temp_raw))
            yield check_temperature(temp, params, "gamatronics_ups_temp_%s" % item)

check_info["gamatronics_ups.temp"] = {
    "check_function"          : check_gamatronics_ups_temp,
    "inventory_function"      : inventory_gamatronics_ups_temp,
    "service_description"     : "Temperature %s",
    "group"                   : "temperature",
    "has_perfdata"            : True,
    "snmp_info"               : gamatronics_ups_info,
    "snmp_scan_function"      : gamatronics_ups_scan,
    "includes"                : [ "temperature.include" ],
    "default_levels_variable" : "gamatronics_ups_temp_default_levels",
}

# Fin.

