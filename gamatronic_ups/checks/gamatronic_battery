#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# GAMMATRONIC-MIB::psUnit
# .1.3.6.1.4.1.6050.1.1.1.0 = STRING: "OR ADIR"
# .1.3.6.1.4.1.6050.1.1.2.0 = STRING: "Gamatronic"
# .1.3.6.1.4.1.6050.1.1.3.0 = STRING: "YUASA"
# .1.3.6.1.4.1.6050.1.1.4.0 = STRING: "50-6"
# .1.3.6.1.4.1.6050.1.1.5.0 = STRING: "SC1006"
# .1.3.6.1.4.1.6050.1.1.6.0 = STRING: "abc"
# .1.3.6.1.4.1.6050.1.1.7.0 = STRING: "SNMP"
# .1.3.6.1.4.1.6050.1.1.8.0 = STRING: "83-06-06-15"
#
# GAMMATRONIC-MIB::psBattery
# .1.3.6.1.4.1.6050.1.2.2.0 = INTEGER: 5243
# .1.3.6.1.4.1.6050.1.2.3.0 = INTEGER: 1
# .1.3.6.1.4.1.6050.1.2.5.0 = INTEGER: 132
# .1.3.6.1.4.1.6050.1.2.12.0 = INTEGER: 0
#
# GAMMATRONIC-MIB::psBatteryTable
# .1.3.6.1.4.1.6050.1.2.26.1.1.1 = INTEGER: 1
# .1.3.6.1.4.1.6050.1.2.26.1.2.1 = INTEGER: 0
# .1.3.6.1.4.1.6050.1.2.26.1.3.1 = INTEGER: 0
# .1.3.6.1.4.1.6050.1.2.26.1.4.1 = INTEGER: 0
# .1.3.6.1.4.1.6050.1.2.26.1.5.1 = INTEGER: 43
# .1.3.6.1.4.1.6050.1.2.26.1.6.1 = INTEGER: 30
#
# GAMMATRONIC-MIB::psDCOutput
# .1.3.6.1.4.1.6050.1.6.3.0 = INTEGER: 0

gamatronic_ups_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.6050"

gamatronic_ups_info = [(".1.3.6.1.4.1.6050.1.1", [ #  GAMMATRONIC-MIB::psUnit
                               "1.0",    # psUnitSysName
                               "2.0",    # psUnitManufacture
                               "3.0",    # psUnitBatteryType
                               "4.0",    # psUnitPSType
                               "5.0",    # psUnitControllerType
                               "6.0",    # psUnitSoftwareVersion
                               "7.0",    # psUnitComProtocolVersion
                               "8.0",    # psUnitSerialNumber
                          ]),
                         (".1.3.6.1.4.1.6050.1.2", [ #  GAMMATRONIC-MIB::psBattery
                               "2.0",    # psBatteryVoltage
                               "3.0",    # psBatteryTestStatus
                               "5.0",    # psBatteryActualCapacity
                              "12.0",    # psBatteryChargeMode
                          ]),
                         (".1.3.6.1.4.1.6050.1.2.26", [ #  GAMMATRONIC-MIB::psBatteryTable
                               "1.1",  # psBatteryIndex
                               "1.2",  # psBatteryCurrentDirection
                               "1.3",  # psBatteryCurrent
                               "1.4",  # psBatteryTemperatureSign
                               "1.5",  # psBatteryTemperature
                               "1.6",  # psBatteryStatus
                          ]),
                         (".1.3.6.1.4.1.6050.1.6", [ #  GAMMATRONIC-MIB::psDCOutput
                               "3.0",    # psDCoutputCurrent2 - battery current
                          ]),
                     ]

def inventory_gamatronic_battery(info):
    battery_info = info[1]  # psBattery 
    if len(battery_info) > 0:
            yield None, {}

def check_gamatronic_battery(item, _no_params, info):
    map_mode = {
       "0": ("floating"),
       "1": ("equalized"),
    }

    battery_info = info[1]  # psBattery
    dc_output = info[3]  # psDCOutput
    voltage_raw, test_status, capacity, charge_mode = battery_info[0]
    battery_raw = dc_output[0][0]
    voltage = float(voltage_raw) / 100.0
    if battery_raw == "0":
        battery_current = 0.0
    else:
        battery_current = float(battery_raw) / 100.0

    infotext = "Charge Mode: %s, Capacity: %sAh, Voltage: %.2fV, Load: %.2fA" % \
               (map_mode.get(charge_mode), capacity, voltage, battery_current)
    perfdata = [("current", battery_current)]

    return 0, infotext, perfdata

check_info["gamatronic_battery"] = {
    "inventory_function"        : inventory_gamatronic_battery,
    "check_function"            : check_gamatronic_battery,
    "service_description"       : 'Battery',
    "has_perfdata"              : True,
    "snmp_info"                 : gamatronic_ups_info,
    "snmp_scan_function"        : gamatronic_ups_scan,

}

# Fin.

