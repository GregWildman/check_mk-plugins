#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# RU_73_2.88.MIB::nwInterfaceStatusTable
# SNMPv2-SMI::enterprises.26149.2.2.12.2.1.2.1 = STRING: "eth0"
# SNMPv2-SMI::enterprises.26149.2.2.12.2.1.3.1 = INTEGER: 1
# SNMPv2-SMI::enterprises.26149.2.2.12.2.1.4.1 = STRING: "F8:52:DF:1B:80:78"
#
# RU_73_2.88.MIB::nwInterfaceStatisticsTable
# SNMPv2-SMI::enterprises.26149.2.2.12.3.1.2.1 = Gauge32: 4088928634
# SNMPv2-SMI::enterprises.26149.2.2.12.3.1.3.1 = Gauge32: 2202880586
# SNMPv2-SMI::enterprises.26149.2.2.12.3.1.4.1 = Gauge32: 660733036
# SNMPv2-SMI::enterprises.26149.2.2.12.3.1.5.1 = Gauge32: 2589746175
# SNMPv2-SMI::enterprises.26149.2.2.12.3.1.6.1 = Gauge32: 0
# SNMPv2-SMI::enterprises.26149.2.2.12.3.1.7.1 = Gauge32: 0
# SNMPv2-SMI::enterprises.26149.2.2.12.3.1.8.1 = Gauge32: 0
# SNMPv2-SMI::enterprises.26149.2.2.12.3.1.9.1 = Gauge32: 0
#
# RU_73_2.88.MIB::ethPhyPortStatusTable
# SNMPv2-SMI::enterprises.26149.2.2.12.4.1.2.1 = INTEGER: 4
# SNMPv2-SMI::enterprises.26149.2.2.12.4.1.3.1 = INTEGER: 2
# SNMPv2-SMI::enterprises.26149.2.2.12.4.1.4.1 = INTEGER: 2

shyam_eth_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1" and \
                              oid(".1.3.6.1.4.1.26149.2.2.12.2.1.2.1") != None

shyam_eth_info = [ (".1.3.6.1.4.1.26149.2.2.12.2", [   # RU_73_2.88.MIB::nwInterfaceStatusTable
                            OID_END,
                            "1.2",    # nwInterfaceName
                            "1.3",    # operationalState
                            "1.4",    # macAddress
                            ]),
                    (".1.3.6.1.4.1.26149.2.2.12.3", [   # RU_73_2.88.MIB::nwInterfaceStatisticsTable
                            "1.2",    # rxPackets
                            "1.3",    # txPackets
                            "1.4",    # rxBytes
                            "1.5",    # txBytes
                            "1.6",    # rxErrors
                            "1.7",    # txErrors
                            "1.8",    # rxDropped
                            "1.9",    # txDropped
                            ]),
                    (".1.3.6.1.4.1.26149.2.2.12.4", [   # RU_73_2.88.MIB::ethPhyPortStatusTable
                            "1.2",    # phyPortStatusLinkMode
                            "1.3",    # phyPortStatusMdiMode
                            "1.4",    # phyPortStatus
                            ]),
                ]

def render_shyam_eth_mac_address(ifPhysAddress):
    if len(ifPhysAddress) != 17:
        ifPhysAddress = "00:00:00:00:00:00"
    mac_bytes = ifPhysAddress.split(":")
    return [int(m, 16) for m in mac_bytes]

def parse_shyam_eth(info):
    parsed = []
    num_of_interfaces = len(info[0])   # nwInterfaceStatusTable
    status, stats, phy_status = info
    map_speed = {
        "1": ("10000000"),
        "2": ("10000000"),
        "3": ("100000000"),
        "4": ("100000000"),
    }
    map_state = {
        "0": ("2"),
        "1": ("1"),
    }

    # Build a list to match RFC1213-MIB::interfaces.
    for x in range(0, num_of_interfaces):
        parsed.append( [ status[x][0] ] +                     # ifIndex
                       [ status[x][1] ] +                     # ifDescr
                       [ "6" ] +                              # ifType 
                       [ map_speed.get(phy_status[x][0]) ] +  # ifSpeed
                       [ map_state.get(status[x][2]) ] +      # ifOperStatus
                       [ stats[x][2] ] +                      # ifInOctets
                       [ stats[x][0] ] +                      # ifInUcastPkts
                       [ "0" ] +                              # ifInMulticastPkts
                       [ "0" ] +                              # ifInBroadcastPkts
                       [ stats[x][6] ] +                      # ifInDiscards
                       [ stats[x][4] ] +                      # ifInErrors
                       [ stats[x][3] ] +                      # ifOutOctets
                       [ stats[x][1] ] +                      # ifOutUcastPkts
                       [ "0" ] +                              # ifOutMulticastPkts
                       [ "0" ] +                              # ifOutBroadcastPkts
                       [ stats[x][7] ] +                      # ifOutDiscards
                       [ stats[x][5] ] +                      # ifOutErrors
                       [ "0" ] +                              # ifOutQLen
                       [ status[x][2] ] +                     # ifAlias
                       [ render_shyam_eth_mac_address(status[x][3]) ]                       # ifPhysAddress
                     )

    return parsed

def inventory_shyam_eth(parsed):
    return inventory_if_common(parsed)

check_info["shyam_eth"] = {
    "parse_function"            : parse_shyam_eth,
    "inventory_function"        : inventory_shyam_eth,
    "check_function"            : check_if_common,
    "service_description"       : 'Interface %s',
    "has_perfdata"              : True,
    "snmp_info"                 : shyam_eth_info,
    "snmp_scan_function"        : shyam_eth_scan,
    "includes"                  : [ "if.include" ],
    "group"                     : "if",
    "default_levels_variable"   : "if_default_levels"
}

# Fin.

