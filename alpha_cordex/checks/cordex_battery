#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.2.1 = STRING: "Controller input1"
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.3.1 = INTEGER: 19
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.4.1 = STRING: "Load Voltage"
# 
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.2.2 = STRING: "Controller input2"
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.3.2 = INTEGER: 398
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.4.2 = STRING: "Load Current"
# 
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.2.3 = STRING: "Controller input3"
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.3.3 = INTEGER: 5395
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.4.3 = STRING: "Battery Voltage"
# 
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.2.4 = STRING: "Controller input4"
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.3.4 = INTEGER: 18
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.4.4 = STRING: "Battery Current"
# 
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.2.8 = STRING: "Controller input8"
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.3.8 = INTEGER: 10000
# .1.3.6.1.4.1.7309.4.1.6.2.2.1.4.8 = STRING: "Battery Capacity"

cordex_battery_default_levels = { 'capacity': (95, 90), 'voltage': (50, 48) }

def inventory_cordex_battery(info):
    for line in info:
        if line[2] == "Battery Capacity":
          yield None, 'cordex_battery_default_levels'

def check_cordex_battery(item, params, info):
    batt_capacity = 0
    batt_voltage = 0
    batt_current = 0
    load_voltage = 0
    load_current = 0
    for line in info:
        if line[2] == 'Load Voltage':
            load_voltage = float(line[1]) / 100.0
        elif line[2] == 'Load Current':
            load_current = float(line[1]) / 100.0
        elif line[2] == 'Battery Voltage':
            batt_voltage = float(line[1]) / 100.0
        elif line[2] == 'Battery Current':
            batt_current = float(line[1]) / 100.0
        elif line[2] == 'Battery Capacity':
            batt_capacity = float(line[1]) / 100.0

    warn, crit = params.get('capacity', (95, 90))
    if batt_capacity < crit:
        state = 2
    elif batt_capacity < warn:
        state = 1
    else:
        state = 0
    if state:
        levelstext = " (warn/crit at %d/%d%%)" % (warn, crit)
    else:
        levelstext = ""
    yield state, ("Capacity at %d%%" % batt_capacity) + levelstext


    volt_warn, volt_crit = params.get('voltage', (50, 48))
#    if load_voltage < volt_crit:
#        state = 2
#    elif load_voltage < volt_warn:
#        state = 1
#    else:
#        state = 0
#    if state:
#        levelstext = " (warn/crit at %d/%d%V)" % (volt_warn, volt_crit)
#    else:
#        levelstext = ""
#    yield state, (", Load: %.2fV / %.2fA" % (load_voltage, load_current)) + levelstext

    infotext = "Battery: %.2fV / %.2fA, Load: %.2fV / %.2fA" % (batt_voltage, batt_current, load_voltage, load_current)
    perfdata = [ ("battery_capacity", batt_capacity, warn, crit, 0, 100),
                 ("battery_voltage", batt_voltage, volt_warn, volt_crit),
                 ("battery_current", batt_current),
                 ("load_voltage", load_voltage),
                 ("load_current", load_current), ]

    yield 0, infotext, perfdata

check_info["cordex_battery"] = {
    "check_function"        : check_cordex_battery,
    "inventory_function"    : inventory_cordex_battery,
    "service_description"   : "Battery",
    "has_perfdata"          : True,
    "snmp_info"             : ( ".1.3.6.1.4.1.7309.4.1.6.2.2", [
                                       "1.2",
                                       "1.3",
                                       "1.4",
                              ]),
    "snmp_scan_function"  : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.7309.4",
}

# Fin.

