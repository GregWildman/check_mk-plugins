#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# SNMPv2-SMI::enterprises.4458.1000.1.1.1.0 = STRING: "WL_ODU_1580_E_T_0"
# SNMPv2-SMI::enterprises.4458.1000.1.1.2.0 = STRING: "9"
# SNMPv2-SMI::enterprises.4458.1000.1.1.3.0 = STRING: "1.9.40_b1864_Mar 21 2011"
# SNMPv2-SMI::enterprises.4458.1000.1.1.14.0 = STRING: "GSS/2/EXT"
# SNMPv2-SMI::enterprises.4458.1000.1.1.29.0 = STRING: "E02700F00006F"
# SNMPv2-SMI::enterprises.4458.1000.1.1.30.0 = STRING: "RW-9924-001X"
# SNMPv2-SMI::enterprises.4458.1000.1.5.40.2.0 = INTEGER: 6
# SNMPv2-SMI::enterprises.4458.1000.1.5.40.9.0 = INTEGER: 22244
# SNMPv2-SMI::enterprises.4458.1000.1.5.40.11.0 = STRING: "-26.201856"
# SNMPv2-SMI::enterprises.4458.1000.1.5.40.13.0 = STRING: "28.47280"
# SNMPv2-SMI::enterprises.4458.1000.1.5.40.15.0 = STRING: "08"
# SNMPv2-SMI::enterprises.4458.1000.1.5.40.16.0 = STRING: "1896.0"

radwin_5000_gsu_scan = lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.4458.20.4.1.2")
                               
radwin_5000_gsu_info = ( ".1.3.6.1.4.1.4458.1000.1", [   # RADWIN-MIB-WINLINK1000: winlink1000Odu
                                "1.2.0",         # OduAdmHwRev              0
                                "1.3.0",         # OduAdmSwRev              1
                                "1.14.0",        # OduProductId             2
                                "1.29.0",        # OduAdmSN                 3
                                "1.30.0",        # OduAdmProductName        4
                                "5.40.2.0",      # AirHssCurrentOpState     5
                                "5.40.9.0",      # AirHssHsmID              6
                                "5.40.11.0",     # AirHssLatitude           7
                                "5.40.13.0",     # AirHssLongitude          8
                                "5.40.15.0",     # AirHssNumSatellites      9
                                "5.40.16.0",     # AirHssAltitude          10
                                ]
                       )

factory_settings["radwin_5000_gsu_default_satellites"] = {
    "satellites" : (4, 6),
}

def inventory_radwin_5000_gsu(info):
    if saveint(info[0][0]) > 0:
        yield "GSU Info", {}

def check_radwin_5000_gsu(item, params, info):
    state = 0
    for hw_rev, sw_rev, prod_id, serial, prod_name, operstate, hsm_id, \
        gps_lat, gps_long, sats, alt in info:
        if item == "GSU Info":
            satellites = saveint(sats)
            altitude = savefloat(alt)
            infotext = "%s, %s, Serial: %s, HW Ver. %s, SW Ver. %s, " % (prod_name, prod_id, serial, hw_rev, sw_rev)

            if operstate == "6": # gpsSync
                infotext += "Lat. %s, Long. %s, Satellites: %d" % (gps_lat, gps_long, satellites)
                warn, crit = params.get("satellites")
                if satellites <= crit:
                    infotext += "(!!)"
                    state = 2
                elif satellites <= warn:
                    infotext += "(!)"
                    state = 1

                infotext += ", Alt. %.1fm" % (altitude)
            else:
                infotext += "GPS has lost sync(!!)"
                state = 2

            perfdata = [("sats", "%d" % satellites)]

            return (state, infotext, perfdata)

check_info["radwin_5000_gsu"] = {
    "inventory_function"        : inventory_radwin_5000_gsu,
    "check_function"            : check_radwin_5000_gsu,
    "service_description"       : "%s",
    "has_perfdata"              : True,
    "snmp_info"                 : radwin_5000_gsu_info,
    "snmp_scan_function"        : radwin_5000_gsu_scan,
    'default_levels_variable'   : 'radwin_5000_gsu_default_satellites',
}

# Fin.


