#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# RADWIN-MIB-WINLINK1000::winlink1000OduAdmin
# .1.3.6.1.4.1.4458.1000.1.1.1.0 = STRING: "WL_ODU_1580_I_T_0"
# .1.3.6.1.4.1.4458.1000.1.1.2.0 = STRING: "5"
# .1.3.6.1.4.1.4458.1000.1.1.3.0 = STRING: "2.6.50_b2887_Oct 18 2011"
# .1.3.6.1.4.1.4458.1000.1.1.4.0 = STRING: "Sunnypark--City of tswane "
# .1.3.6.1.4.1.4458.1000.1.1.14.0 = STRING: "2K1/F59/UNI/INT"
# .1.3.6.1.4.1.4458.1000.1.1.19.0 = STRING: "Sunnypark"
# .1.3.6.1.4.1.4458.1000.1.1.29.0 = STRING: "P02950I500A00549"
# .1.3.6.1.4.1.4458.1000.1.1.30.0 = STRING: "RW-2959-9150"
#
# RADWIN-MIB-WINLINK1000::winlink1000OduAir
# .1.3.6.1.4.1.4458.1000.1.5.3.0 = STRING: "SELUCREHBS12000--GP1545"
# .1.3.6.1.4.1.4458.1000.1.5.9.1.0 = INTEGER: -65
# .1.3.6.1.4.1.4458.1000.1.5.12.0 = INTEGER: 1
# .1.3.6.1.4.1.4458.1000.1.5.15.0 = INTEGER: 5
# .1.3.6.1.4.1.4458.1000.1.5.16.0 = INTEGER: 5915
# .1.3.6.1.4.1.4458.1000.1.5.17.0 = INTEGER: 43
# .1.3.6.1.4.1.4458.1000.1.5.28.0 = INTEGER: 0
# .1.3.6.1.4.1.4458.1000.1.5.29.0 = INTEGER: 900
# .1.3.6.1.4.1.4458.1000.1.5.30.0 = INTEGER: 2
# .1.3.6.1.4.1.4458.1000.1.5.40.2.0 = INTEGER: 3
# .1.3.6.1.4.1.4458.1000.1.5.40.4.0 = INTEGER: 2
#
# RADWIN-MIB-WINLINK1000::winlink1000OduEthernetIfTable
# .1.3.6.1.4.1.4458.1000.1.3.2.1.5.0 = STRING: "00156746ec5f"

radwin_2000_scan = lambda oid: ".1.3.6.1.4.1.4458.20.3.1.1" in oid(".1.3.6.1.2.1.1.2.0")

radwin_2000_info = [ ( ".1.3.6.1.4.1.4458.1000.1.1", [   #  RADWIN-MIB-WINLINK1000::winlink1000OduAdmin
                            "1.0",    # winlink1000OduAdmProductType
                            "2.0",    # winlink1000OduAdmHwRev
                            "3.0",    # winlink1000OduAdmSwRev
                            "4.0",    # winlink1000OduAdmLinkName
                           "14.0",    # winlink1000OduProductId
                           "19.0",    # winlink1000OduAdmRemoteSiteName
                           "29.0",    # winlink1000OduAdmSN
                           "30.0",    # winlink1000OduAdmProductName
                            ]),
                         ( ".1.3.6.1.4.1.4458.1000.1.5", [  # RADWIN-MIB-WINLINK1000::winlink1000OduAir
                            "3.0",    # winlink1000OduAirSSID
                          "9.1.0",    # winlink1000OduAirRxPower
                           "12.0",    # winlink1000OduAirCurrentTxPower
                           "15.0",    # winlink1000OduAirFreqResolution
                           "16.0",    # winlink1000OduAirCurrentFreq
                           "17.0",    # winlink1000OduAirNumberOfChannels
                           "28.0",    # winlink1000OduAirDesiredRateIdx
                           "29.0",    # winlink1000OduAirLinkDistance
                           "30.0",    # winlink1000OduAirLinkWorkingMode
                         "40.2.0",    # winlink1000OduAirHssCurrentOpState
                         "40.4.0",    # winlink1000OduAirHssExtPulseStatus
                           ]),
                         ( ".1.3.6.1.4.1.4458.1000.1.3.2", [  # RADWIN-MIB-WINLINK1000::winlink1000OduEthernetIfTable
                           "1.5.0",   # winlink1000OduEthernetIfAddress
                           ]),
                       ]

def radwin_2000_render_mac_address(ifPhysAddress):
    n = 2 # every 2 chars
    mac_bytes = [ifPhysAddress[i:i+n] for i in range(0, len(ifPhysAddress), n)]
    return (":".join(["%02s" % m for m in mac_bytes]).replace(" ", "0")).upper()

def inventory_radwin_2000(info):
    if len(info[0][0]) > 0:
        yield "Link Summary", {}
    if len(info[1][0]) > 0:
        yield "Device Info", {}
        yield "Link Metering", {}

def check_radwin_2000(item, params, info):
    state = 0
    infotext = ""
    perfdata = []
    prod_type, hw_rev, sw_rev, link_name, prod_id, remote_site, serial, prod_name = info[0][0]
    ssid_raw, rx_pwr, tx_pwr, channel_bw, freq, num_channels, rate, distance, work_mode, op_state, pulse_status = info[1][0]
    ssid = ssid_raw[8:]

    if item == "Device Info":
        mac_raw = info[2][0][0]
        infotext = "Product: %s, HW: %s, SW: %s, Serial: %s, MAC: %s" % \
                   (prod_name, hw_rev, sw_rev, serial, radwin_2000_render_mac_address(mac_raw))
  
    elif item == "Link Summary":
        map_op_state = {
            "1": ("Not Supported"),
            "2": ("Independent Unit"),
            "3": ("Hub Sync Master"),
            "4": ("Hub Sync Client Continue TX"),
            "5": ("Hub Sync Client Disable TX"),
            "6": ("GPS Sync"),
            "7": ("Independent Sync Unit"),
        }
        if rate == "0":
            rate = "Adaptive"
        else:
            rate = "%sm" % rate
        infotext = "HSS: %s, " % map_op_state.get(op_state)
        if link_name != "Link" and link_name != ssid:
            infotext += "Link: %s, " % link_name
        infotext += "ID: %s, Freq: %s MHz, BW: %s MHz, Rate: %s" % (ssid, freq, channel_bw, rate)

    elif item == "Link Metering":
        map_link_state = {
            "1": ("Link Failed"),
            "2": ("Link Active"),
            "3": ("Remote Upgrade Avail."),
            "4": ("Local Upgrade Avail."),
            "5": ("Remote Upgrade Recommended"),
            "6": ("Local Upgrade Recommended"),
            "7": ("Remote Upgrade Required"),
            "8": ("Local Upgrade Required"),
            "9": ("Remote Upgrade Required"),
           "10": ("Local Upgrade Required"),
        }
        infotext = "Status: %s" % map_link_state.get(work_mode)
        if work_mode == "1":
            infotext += "(!!)"
            state = 2
        elif work_mode != "2":
            infotext += "(!)"
            state = 1
        
        infotext += ", Input Power: %.1fdBm, Output Power: %.1fdBm" % (float(rx_pwr), float(tx_pwr))
        if state < 2:
            infotext += ", Range: %sm" % distance

        perfdata = [("link_rx", "%.1fdBm" % float(rx_pwr)), ("link_tx", "%.1fdBm" % float(tx_pwr))]

    return (state, infotext, perfdata)

check_info["radwin_2000"] = {
    "inventory_function"        : inventory_radwin_2000,
    "check_function"            : check_radwin_2000,
    "service_description"       : '%s',
    "has_perfdata"              : True,
    "snmp_info"                 : radwin_2000_info,
    "snmp_scan_function"        : radwin_2000_scan,
}

# Fin.

