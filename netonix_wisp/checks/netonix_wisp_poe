#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Techfu / Greg Wildman <greg.wildman@techfu.co.za> - 2018

# Example Output
#
# .1.3.6.1.2.1.105.1.3.1.1.3.1 = INTEGER: 2
# .1.3.6.1.2.1.105.1.3.1.1.3.2 = INTEGER: 2
# .1.3.6.1.2.1.105.1.3.1.1.3.3 = INTEGER: 1
# .1.3.6.1.2.1.105.1.3.1.1.3.4 = INTEGER: 1
# .1.3.6.1.2.1.105.1.3.1.1.3.5 = INTEGER: 1
# .1.3.6.1.2.1.105.1.3.1.1.3.6 = INTEGER: 1
# .1.3.6.1.2.1.105.1.3.1.1.4.1 = Gauge32: 0
# .1.3.6.1.2.1.105.1.3.1.1.4.2 = Gauge32: 0
# .1.3.6.1.2.1.105.1.3.1.1.4.3 = Gauge32: 21
# .1.3.6.1.2.1.105.1.3.1.1.4.4 = Gauge32: 15
# .1.3.6.1.2.1.105.1.3.1.1.4.5 = Gauge32: 21
# .1.3.6.1.2.1.105.1.3.1.1.4.6 = Gauge32: 81

#  [[[u'1', u'2', u'0'],
#    [u'2', u'2', u'0'],
#    [u'3', u'1', u'20'],
#    [u'4', u'1', u'16'],
#    [u'5', u'1', u'24'],
#    [u'6', u'1', u'81'],
#    [u'7', u'1', u'9'],
#    [u'8', u'1', u'8'],
#    [u'9', u'1', u'7'],
#    [u'10', u'1', u'2'],
#    [u'11', u'2', u'0'],
#    [u'12', u'2', u'0'],
#    [u'13', u'2', u'0'],
#    [u'14', u'2', u'0']],
#   [[u'1', u'Off'],
#    [u'2', u'Off'],
#    [u'3', u'48V'],
#    [u'4', u'48V'],
#    [u'5', u'48V'],
#    [u'6', u'48V'],
#    [u'7', u'48V'],
#    [u'8', u'48V'],
#    [u'9', u'48V'],
#    [u'10', u'48V'],
#    [u'11', u'Off'],
#    [u'12', u'Off'],
#    [u'13', u'Off'],
#    [u'14', u'Off']]]


def parse_netonix_wisp_poe(info):
    parsed = []
    poe_status = {}
    rfc3621_poe_mib = info[0]
    netonix_poe_mib = info[1]

    # Create status dict. Voltage that port is set to.
    for line in netonix_poe_mib:
        poe_status[line[0]] = line[1]

    # Create an all-in-one list
    for poe_idx, poe_oper_status, poe_power, poe_ifalias in rfc3621_poe_mib:
        parsed.append([poe_idx] + [poe_oper_status] + [poe_power] + [poe_status[poe_idx]] + [poe_ifalias])

    return parsed

def inventory_netonix_wisp_poe(parsed):
    for poe_idx, poe_oper_status, poe_power, poe_config, poe_ifalias in parsed:
        if poe_oper_status == "1":  # on
            yield "%02d" % int(poe_idx), {"port_voltage": poe_config}

def check_netonix_wisp_poe(item, params, parsed):
    map_status = {
        "1": ("On"),
        "2": ("Off"),
        "3": ("Faulty"),
    }
    for poe_idx, poe_oper_status, poe_power, poe_config, poe_ifalias in parsed:
        if item == "%02d" % int(poe_idx):
            watts = float(poe_power)

            infotext = "[%s], (%s)" % (poe_ifalias, map_status.get(poe_oper_status))
            if poe_oper_status != "1":
                state = 2
                infotext += "(!!)"

            infotext += " Voltage: %s, Power: %.2f W" % (poe_config, watts)
            return 0, infotext, [('power', watts )]


check_info["netonix_wisp_poe"] = {
    "parse_function"            : parse_netonix_wisp_poe,
    "inventory_function"        : inventory_netonix_wisp_poe,
    "check_function"            : check_netonix_wisp_poe,
    "service_description"       : 'PoE power %s',
    'has_perfdata'              : True,
    "snmp_scan_function"        : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.46242" and \
                                              oid(".1.3.6.1.2.1.105.1.3.1.1.3.1") != None,
    "snmp_info"                 : [(".1.3.6.1.2.1", [   # POWER-ETHERNET-MIB::pethMainPseTable and IF-MIB::ifAlias
                                           OID_END,    # index
                                   "105.1.3.1.1.3",    # pethMainPseOperStatus
                                   "105.1.3.1.1.4",    # pethMainPseConsumptionPower
                                     "31.1.1.1.18",    # ifAlias  
                                   ]),
                                   (".1.3.6.1.4.1.46242.5", [     #  NETONIX-SWITCH-MIB::poeStatusTable
                                           OID_END,    # poeStatusIndex
                                             "1.2",    # poeStatus
                                   ])
                                  ]
}


# Fin.

