#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# this file is part of mkp package "mikroti-api"
# see package description and ~/local/share/doc/check_mk/mikrotik_api
# for details and maintainer
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


import sys, posix, time, binascii, socket, select, ssl, getopt, hashlib

from collections import OrderedDict
from string import ascii_uppercase as alphabet

#
# usage information
#
def usage():
    sys.stderr.write("""checkmk MikroTik Agent

USAGE: agent_mikrotik_api -u <USER> -p <PASSWORD> [OPTIONS] <HOST>
       agent_mikrotik_api -h

ARGUMENTS:
  HOST                          Host name or IP address of the target device
  -u USER, --user USER          Username for MikroTik router login
  -p PASS, --pass PASS          Password for MikroTik router login

OPTIONS:
  -h, --help                    Show this help message and exit
  -n, --nossl                   Do not use SSL to connect to API.
  -c PORT, --connect PORT       Connect to this port. The default is 8728 (no SSL)
                                or 8729 (SSL)
  --debug                       Debug mode: write some debug messages,
                                let Python exceptions come through
  -i MODULES, --modules MODULES Modules to query. This is a comma separated list
                                which may contain the keywords "bgp", "ospf", 
                                "health", "board", "vrrp", "ipsec" and "chains".
                                You can define to use only few of them to optimize
                                performance. The default is "all".

""")


#
# taken from https://wiki.mikrotik.com/wiki/Manual:API_Python3, slightly modified
#
class ApiRos:
    "Routeros api"
    def __init__(self, sk):
        self.sk = sk
        self.currenttag = 0

    def login(self, username, pwd):
        for repl, attrs in self.talk(["/login", "=name=" + username,
                                      "=password=" + pwd]):
          if repl == '!trap':
            return False
          elif '=ret' in attrs.keys():
            chal = binascii.unhexlify((attrs['=ret']).encode(sys.stdout.encoding))
            md = hashlib.md5()
            md.update(b'\x00')
            md.update(pwd.encode(sys.stdout.encoding))
            md.update(chal)
            for repl2, attrs2 in self.talk(["/login", "=name=" + username,
                   "=response=00" + binascii.hexlify(md.digest()).decode(sys.stdout.encoding) ]):
              if repl2 == '!trap':
                return False
        return True

    def talk(self, words):
        if self.writeSentence(words) == 0: return
        r = []
        while 1:
            i = self.readSentence();
            if len(i) == 0: continue
            reply = i[0]
            attrs = {}
            for w in i[1:]:
                j = w.find('=', 1)
                if (j == -1):
                    attrs[w] = ''
                else:
                    attrs[w[:j]] = w[j+1:]
            r.append((reply, attrs))
            if reply == '!done': return r

    def writeSentence(self, words):
        ret = 0
        for w in words:
            self.writeWord(w)
            ret += 1
        self.writeWord('')
        return ret

    def readSentence(self):
        r = []
        while 1:
            w = self.readWord()
            if w == '': return r
            r.append(w)

    def writeWord(self, w):
        self.writeLen(len(w))
        self.writeStr(w)

    def readWord(self):
        ret = self.readStr(self.readLen())
        return ret

    def writeLen(self, l):
        if l < 0x80:
            self.writeByte((l).to_bytes(1, sys.byteorder))
        elif l < 0x4000:
            l |= 0x8000
            tmp = (l >> 8) & 0xFF
            self.writeByte(((l >> 8) & 0xFF).to_bytes(1, sys.byteorder))
            self.writeByte((l & 0xFF).to_bytes(1, sys.byteorder))
        elif l < 0x200000:
            l |= 0xC00000
            self.writeByte(((l >> 16) & 0xFF).to_bytes(1, sys.byteorder))
            self.writeByte(((l >> 8) & 0xFF).to_bytes(1, sys.byteorder))
            self.writeByte((l & 0xFF).to_bytes(1, sys.byteorder))
        elif l < 0x10000000:
            l |= 0xE0000000
            self.writeByte(((l >> 24) & 0xFF).to_bytes(1, sys.byteorder))
            self.writeByte(((l >> 16) & 0xFF).to_bytes(1, sys.byteorder))
            self.writeByte(((l >> 8) & 0xFF).to_bytes(1, sys.byteorder))
            self.writeByte((l & 0xFF).to_bytes(1, sys.byteorder))
        else:
            self.writeByte((0xF0).to_bytes(1, sys.byteorder))
            self.writeByte(((l >> 24) & 0xFF).to_bytes(1, sys.byteorder))
            self.writeByte(((l >> 16) & 0xFF).to_bytes(1, sys.byteorder))
            self.writeByte(((l >> 8) & 0xFF).to_bytes(1, sys.byteorder))
            self.writeByte((l & 0xFF).to_bytes(1, sys.byteorder))

    def readLen(self):
        c = ord(self.readStr(1))
        if (c & 0x80) == 0x00:
            pass
        elif (c & 0xC0) == 0x80:
            c &= ~0xC0
            c <<= 8
            c += ord(self.readStr(1))
        elif (c & 0xE0) == 0xC0:
            c &= ~0xE0
            c <<= 8
            c += ord(self.readStr(1))
            c <<= 8
            c += ord(self.readStr(1))
        elif (c & 0xF0) == 0xE0:
            c &= ~0xF0
            c <<= 8
            c += ord(self.readStr(1))
            c <<= 8
            c += ord(self.readStr(1))
            c <<= 8
            c += ord(self.readStr(1))
        elif (c & 0xF8) == 0xF0:
            c = ord(self.readStr(1))
            c <<= 8
            c += ord(self.readStr(1))
            c <<= 8
            c += ord(self.readStr(1))
            c <<= 8
            c += ord(self.readStr(1))
        return c

    def writeStr(self, str):
        n = 0;
        while n < len(str):
            r = self.sk.send(bytes(str[n:], 'UTF-8'))
            if r == 0: raise RuntimeError("connection closed by remote end")
            n += r

    def writeByte(self, str):
        n = 0;
        while n < len(str):
            r = self.sk.send(str[n:])
            if r == 0: raise RuntimeError("connection closed by remote end")
            n += r

    def readStr(self, length):
        ret = ''
        while len(ret) < length:
            s = self.sk.recv(length - len(ret))
            if s == b'': raise RuntimeError("connection closed by remote end")
            if s >= (128).to_bytes(1, "big") :
               return s
            ret += s.decode(sys.stdout.encoding, "replace")
        return ret

def open_socket(dst, port, secure=True):
  s = None
  res = socket.getaddrinfo(dst, port, socket.AF_UNSPEC, socket.SOCK_STREAM)
  af, socktype, proto, canonname, sockaddr = res[0]
  skt = socket.socket(af, socktype, proto)
  if secure:
    # s = ssl.wrap_socket(skt, ssl_version=ssl.PROTOCOL_TLSv1_2, ciphers="ADH-AES128-SHA256") #ADH-AES128-SHA256
    s = ssl.wrap_socket(skt, ssl_version=ssl.PROTOCOL_TLSv1_2)
  else:
    s = skt
  s.connect(sockaddr)
  return s


#
# convert list returned by api to a dict
# before:  ['!re', '=.id=*391', '=spi=0xF598639', '=src-address=77.220.238.235', ...]
# after:   {'.id': '*391', 'spi': '0xF598639', 'src-address': '77.220.238.235', ... }
#
def list2dict(list):
    return {item.split('=')[1]: item.split('=')[2] for item in list if len(item.split('=')) == 3 }

#
# send command to api and return answer as list of dicts
# readSentence returns one sentence only per connect, therefore need to loop
# just read as long there is any info, then stop reading and return result
#
def myapi(command):
    apiros.writeSentence(command)
    result=[]
    while True:
        new = apiros.readSentence()
        if len(new) > 1:
            result.append(list2dict(new))
        else:
            return result

#
# command line options
#
short_options = 'hu:p:nc:i:'
long_options  = [ 'help', 'user=', 'pass=', 'nossl', 'connect=', 'debug', 'modules=' ]

try:
    opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)
except (getopt.GetoptError, err):
    sys.stderr.write("%s\n" % err)
    sys.exit(1)

opt_debug       = False
opt_timeout     = 10
opt_any_hostkey = ""
nossl           = False
port            = 8729


host            = None
user            = None
password        = None
mortypes        = [ 'all' ]

command_options = {
    "resource"      : {"section_header" : "mikrotik_api_resource",   "active" : False,
                       "command" : ["/system/resource/print"]},
    "interface"     : {"section_header" : "mikrotik_api_interface",  "active" : False,
                       "command" : ["/interface/print"]},
    "bgp"           : {"section_header" : "mikrotik_api_bgp",        "active" : False,
                       "command" : ["/routing/bgp/peer/print"]},
    "ospf"          : {"section_header" : "mikrotik_api_ospf",       "active" : False,
                       "command" : ["/routing/ospf/neighbor/print"]},
    "health"        : {"section_header" : "mikrotik_api_health",     "active" : False,
                       "command" : ["/system/health/print"]},
    "board"         : {"section_header" : "mikrotik_api_board",      "active" : False,
                       "command" : ["/system/routerboard/print"]},
    "vrrp"          : {"section_header" : "mikrotik_api_vrrp",       "active" : False,
                       "command" : ["/interface/vrrp/print"]},
    "ipsec"         : {"section_header" : "mikrotik_api_ipsec",      "active" : False,
                       "command" : ["/ip/ipsec/peer/print"]},
    "firewall"      : {"section_header" : "mikrotik_api_firewall",   "active" : False,
                       "command" : ["/ip/firewall/filter/print"]},
    "certificate"   : {"section_header" : "mikrotik_api_certificate",   "active" : False,
                       "command" : ["/certificate/print"]},
    "ntp"           : {"section_header" : "mikrotik_api_ntp",   "active" : False,
                       "command" : ["/system/ntp/client/print"]},
    "poe"           : {"section_header" : "mikrotik_api_poe",   "active" : False,
                       "command" : ["/interface/ethernet/poe/monitor", "=.proplist=name,poe-out-power", "=interface=ether01/rb3011/e1", "=once="]},
    "ppp"           : {"section_header" : "mikrotik_api_ppp_sessions",   "active" : False,
                       "command" : ["/ppp/active/print"]},
}

for o,a in opts:
    if o in [ '--debug' ]:
        opt_debug = True
    elif o in [ '-u', '--user' ]:
        user = a
    elif o in [ '-p', '--pass' ]:
        password = a
    elif o in [ '-n', '--nossl' ]:
        nossl   = True
        port    = 8729
    elif o in [ '-c', '--connect' ]:
        port    = a
    elif o in [ '-i', '--modules' ]:
        mortypes = a.split(',')
    elif o in [ '-h', '--help' ]:
        usage()
        sys.exit(0)

if len(args) == 1:
    host = args[0]


if not args:
    sys.stderr.write("ERROR: No arguments.\n\n")
    usage()
    sys.exit(1)

if host == None:
    sys.stderr.write("ERROR: No host given.\n\n")
    usage()
    sys.exit(1)

if user == None:
    sys.stderr.write("ERROR: No user name given.\n\n")
    usage()
    sys.exit(1)

if password == None:
    sys.stderr.write("ERROR: No password given.\n\n")
    usage()
    sys.exit(1)

for module in command_options.keys():
    try:
        if mortypes.index("all") >= 0:
            command_options[module]["active"] = True
    except ValueError:
        pass

    try:
        if mortypes.index(module) >= 0:
            command_options[module]["active"] = True
    except ValueError:
        pass


#
# connect to API
#

if nossl:
    s = open_socket(host, port, False)
else:
    s = open_socket(host, port, True)

if s is None:
    print ('could not open socket')
    sys.exit(1)

apiros = ApiRos(s);
if not apiros.login(user, password):
    print ('cannot log in')
    sys.exit(1)


#
# special agent header
#
print ("<<<check_mk>>>")
print ("Version: 2.1-MikroTik")


#
# fetch information from api, loop thru modules, prepare output for checkmk
#
for module in command_options.keys():

    if command_options[module]["active"] == True:

        #
        # check declaration
        #
        header  = str(command_options[module]["section_header"])

        #
        # read and execute api command
        #
        command = command_options[module]["command"]
        out     = myapi(command)
        
        #
        # if api returned any information
        #
        if out:

            #
            # BGP, VRRP and OSPF checks are similar:
            # one master key to identify resource first and then some required information following
            #
            if header == "mikrotik_api_bgp" or header == "mikrotik_api_ospf" or header == "mikrotik_api_vrrp":
                if header == "mikrotik_api_bgp":
                    required = ['established', 'remote-as', 'remote-address', 'disabled', 'prefix-count', 'updates-sent', 'updates-received', 'withdrawn-sent', 'withdrawn-received']
                    master   = 'name'
                elif header == "mikrotik_api_ospf":
                    required = ['state', 'address', 'interface']
                    master   = 'router-id'
                else:
                    required = ['vrid', 'invalid', 'mac-address', 'master', 'backup', 'interface', 'running', 'disabled']
                    master   = 'name'

                print ('<<<%s>>>' % header)
                for line in out:
                    print ("%s %s" % ( master, line[master]))
                    for item in line:
                        if item in required:
                            print ("%s %s" % ( item, line[item]))


            #
            # split health into different checks
            #
            elif header == "mikrotik_api_health":

                #
                # use these as (string-)filter for output _and_ check declaration
                #
                health_items = ['fan', 'temp', 'power', 'psu']


                #
                # sort all information to health_items, just compare names
                #
                info = {}
                for line in out:
                    for what in health_items:
                        info[what] = dict(filter(lambda item: what in item[0], line.items()))


                #
                # special handling if name is not sufficiant
                #
                for special in ['current', 'voltage']:
                    info['power'].update(dict(filter(lambda item: special in item[0], line.items())))


                #
                # print all health_items that contain values
                #
                for what in health_items:
                    if info[what]:
                        print ("<<<mikrotik_api_%s>>>" % what)
                        for item in info[what]:
                            print ("%s %s" % ( item, info[what][item]))
    

            #
            # ipsec
            #
            elif header == "mikrotik_api_ipsec":
                print ('<<<%s>>>' % header)

                for line in out:
                    if line['dynamic'] == 'false':
                        print ("peer %s %s %s" % (line['name'], line['local-address'].split('/')[0], line['address'].split('/')[0]))

                command = ["/ip/address/print"]
                for line in myapi(command):
                    if line['invalid'] == 'true':
                        print ("invip %s %s" % (line['address'].split('/')[0], line['actual-interface']))

                #
                # this is ipsec main info, the 2 api calls before are only to detect a standby gateway
                #
                command = ["/ip/ipsec/installed-sa/print"]
                for line in myapi(command):
                    print ("sa %s %s %s 0 0" % ( line['src-address'], line['dst-address'], line['state']))
    
            #
            # chains
            #
            elif header == "mikrotik_api_firewall":
                print ('<<<%s>>>' % header)


                #
                # remove duplicates, that are reported by api for whatever reason
                # - convert list of dicts into list of tuples containing dict
                # - hash (set comprehension)
                # - recreate dict
                #
                out = [dict(t) for t in {tuple(d.items()) for d in out}]

                #
                # print the information we have, do not stop on missing ones
                #
                for line in out:
                     for what in ['comment', '.id', 'chain', 'bytes', 'packets', 'disabled']:
                         try:
                             print ("%s %s" % (what, line[what]))
                         except:
                             print ("%s None" % (what))

            #
            # ppp sessions
            #
            elif header == "mikrotik_api_ppp_sessions":
                print ('<<<%s>>>' % header)

                for line in out:
                     for what in ['name', 'service', 'address', 'uptime']:
                         try:
                             print ("%s %s" % (what, line[what]))
                         except:
                             print ("%s None" % (what))


            #
            # any other key-value information with no special handling 
            #
            else:
                print ('<<<%s>>>' % header)
                for line in out:
                    for item in line:
                        print ("%s %s" % ( item, line[item]))

            #
            # board needs some additional info appended
            #
            if header == "mikrotik_api_board":
                command = ["/system/package/print"]
                for line in myapi(command):
                    if line['name'] == 'system':
                        print ("%s %s" % (line['bundle'], line['version']))

#
# This is the end
#
