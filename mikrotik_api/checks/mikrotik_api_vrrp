#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# this file is part of mkp package "mikrotik"
# see package description and ~/local/share/doc/check_mk/mikrotik
# for details and maintainer
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#
# parse function
#
def parse_mikrotik_api_vrrp(info):
    data = {}
    for line in info:
        if line[0] == 'name':
            name = line[1]
            data[name]={}
        data[name][line[0]] = ' '.join(line[1:])
    return data

#
# inventory function
#
def inventory_mikrotik_api_vrrp(parsed):
    for vrrp in parsed.keys():
        if parsed[vrrp]['disabled'] == 'false':
            yield vrrp, {}

#
# check function
#
def check_mikrotik_api_vrrp(item, params, parsed):
    
    #
    # prepare
    #
    try:
        data = parsed[item]
    except:
        return 3, 'item not found in agent output'


    #
    # check state
    #
    if data['running'] == 'true':
        try:
            if data['master'] == 'true':
                infotext = 'VRRP %s (%s), interface %s' % (data['vrid'], 'master', data['interface'])
        except:
            infotext = 'VRRP %s running on %s, but is not master(!!)' % (data['vrid'], data['interface'])
    else:
        try:
            if data['backup'] == 'true':
                infotext = 'VRRP %s (%s), interface %s' % (data['vrid'], 'backup', data['interface'])
        except:
            infotext = 'VRRP %s not running on %s, but is not backup(!!)' % (data['vrid'], data['interface'])

    #
    # additional info
    #
    infotext += '\nmac-address: %s' % data['mac-address']

    #
    # get worst state from infotext
    #
    if '!!' in infotext:
        stateval = 2
    elif '!' in infotext:
        stateval = 1
    else:
        stateval = 0

    #
    # this is the end
    #
    return stateval, infotext


#
# check info
#
check_info["mikrotik_api_vrrp"] = {
        "parse_function"            : parse_mikrotik_api_vrrp,
        "check_function"            : check_mikrotik_api_vrrp,
        "service_description"       : "VRRP %s",
        "inventory_function"        : inventory_mikrotik_api_vrrp,
}
