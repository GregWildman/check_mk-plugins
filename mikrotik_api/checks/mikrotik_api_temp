#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# this file is part of mkp package "mikrotik"
# see package description and ~/local/share/doc/check_mk/mikrotik
# for details and maintainer
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#Router:
#<<<mikrotik_api_temp>>>
#temperature 38
#cpu-temperature 55
#cpu-overtemp-check True
#cpu-overtemp-startup-delay 1m
#cpu-overtemp-threshold 100
#
#Switch with RouterOS:
#<<<mikrotik_api_temp>>>
#cpu-temperature 59
#board-temperature1 44
#board-temperature2 26
#

from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import

#
# defaults
#
factory_settings["mikrotik_api_temp"] = {
    'cpu'     : (85,95),  # cpu thresholds °C
    'board'   : (55,65),  # board thresholds °C
    }

#
# parse function
#
def parse_mikrotik_api_temp(info):
    data = {}
    for line in info:
        if len(line) == 2 and 'temperature' in line[0]:
            if line[0] == 'temperature':
                sensor = 'chassis'
            else:
                sensor = line[0]
            data[sensor] = {}
            data[sensor]['temp'] = int(line[1])
    return data


#
# inventory function
#
def inventory_mikrotik_api_temp(parsed):
    for sensor in parsed.keys():
            yield sensor, 'mikrotik_api_temp'


#
# check function
#
def check_mikrotik_api_temp(item, params, parsed):

    #
    # parse info from agent
    #
    data = parsed[item]
    temp = int(data['temp'])

    #
    # different upper levels
    #
    if 'cpu' in item:
        dev_levels = params['cpu']
    else:
        dev_levels = params['board']

    #
    # just hardcoded for compatibility
    #
    dev_levels_lower = 0, 0

    
    #
    # this is the end
    #
    return check_temperature(temp, params, "%s" % item, \
                        dev_levels = dev_levels, dev_levels_lower = dev_levels_lower)

#
# check info
#
check_info['mikrotik_api_temp'] = {
    'parse_function'            : parse_mikrotik_api_temp,
    'inventory_function'        : inventory_mikrotik_api_temp,
    'check_function'            : check_mikrotik_api_temp,
    'service_description'       : 'Temperature %s',
    'default_levels_variable'   : 'mikrotik_api_temp',
    'has_perfdata'              : True,
    'group'                     : 'temperature',
}

