#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# CISCO-ENTITY-SENSOR-MIB::entSensorScale

cisco_entity_exponents = {
    "1"  : -24,  #     1:yocto
    "2"  : -21,  #     2:zepto
    "3"  : -18,  #     3:atto
    "4"  : -15,  #     4:femto
    "5"  : -12,  #     5:pico
    "6"  : -9,   #     6:nano
    "7"  : -6,   #     7:micro
    "8"  : -3,   #     8:milli
    "9"  : 0,    #     9:units
    "10" : 3,    #     10:kilo
    "11" : 6,    #     11:mega
    "12" : 9,    #     12:giga
    "13" : 12,   #     13:tera
    "14" : 18,   #     14:exa
    "15" : 15,   #     15:peta
    "16" : 21,   #     16:zetta
    "17" : 24,   #     17:yotta
}

def parse_cisco_optical(info):
    description_info, state_info, levels_info = info

    # Parse OIDs described by CISCO-ENTITY-SENSOR-MIB
    entity_parsed = {}

    # Create dict of sensor descriptions
    descriptions = dict(description_info)

    # Create dict with thresholds
    thresholds = {}
    for sensor_id, sensortype, scalecode, magnitude, value, sensorstate in state_info:
        thresholds.setdefault(sensor_id, [])

    for endoid, level in levels_info:
        # endoid is e.g. 21549.9 or 21459.10
        sensor_id, subid = endoid.split('.')
        thresholds.setdefault(sensor_id, []).append(level)

    for sensor_id, sensortype, scalecode, magnitude, value, sensorstate in state_info:
        if sensor_id in descriptions:
            descr = descriptions[sensor_id]
        else:
            descr = sensor_id
        if "Power Sensor" in descr and sensortype == '14': # only care about dBm sensors

            # We want both TX and RX into one entity.
            descr, entity_type, filler = descr.split(' ', 2)
            if sensorstate == '2':
                entity_parsed[descr] = (3, "Data from sensor currently not available")
            elif sensorstate == '3':
                entity_parsed[descr] = (3, "Sensor is broken")
            elif sensorstate == '1':
                if not descr in entity_parsed:
                    entity_parsed[descr] = {}
                scale = 10**int(magnitude)

                scale *= 10 ** (-1 * cisco_entity_exponents[scalecode])

                entity_parsed[descr]["%s_power" % entity_type.lower()] = float(value) / scale

                if len(thresholds[sensor_id]) == 4:
                    warnraw, critraw = thresholds[sensor_id][2:4]
                    # Some devices deliver these values in the wrong order
                    dev_levels = ( min(float(warnraw)/scale, float(critraw)/scale),
                                   max(float(warnraw)/scale, float(critraw)/scale) )
                else:
                    dev_levels = None
                entity_parsed[descr]['%s_levels' % entity_type.lower()] = dev_levels

    return entity_parsed


def inventory_cisco_optical(parsed):
    for item, value in parsed.iteritems():
        if type(parsed[item]) == tuple or not value.get("obsolete", False):
            yield item, {}

def check_cisco_optical(item, params, parsed):
    if item in parsed:
        if type(parsed[item]) == tuple:
            return parsed[item]
        elif parsed[item].get("obsolete", False):
            return 3, "This sensor is obsolete, please rediscover"
        else:
            infotext = "Input Power: %.1f, Output Power: %.1f" % (parsed[item]['receive_power'], parsed[item]['transmit_power'])
            perfdata = [("input_power", "%.1fdBm" % parsed[item]['receive_power']),
                        ("output_power", "%.1fdBm" % parsed[item]['transmit_power'])]
            
            return 0, infotext, perfdata


check_info['cisco_optical'] = {
    "parse_function"     : parse_cisco_optical,
    "inventory_function" : inventory_cisco_optical,
    "check_function"     : check_cisco_optical,
    "service_description": "Optical %s",
    "has_perfdata"       : True,
    "snmp_scan_function" : lambda oid: "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower() and \
                                    ( oid(".1.3.6.1.4.1.9.9.91.1.1.1.1.*") != None or
                                      oid(".1.3.6.1.4.1.9.9.13.1.3.1.3.*") != None ),
    "snmp_info"          : [
                               # cisco_sensor descriptions
                               ( ".1.3.6.1.2.1.47.1.1.1.1", [
                                 OID_END,
                                 CACHED_OID(2), # Description of the sensor
                               ]),

                               # Type and current state
                               ( ".1.3.6.1.4.1.9.9.91.1.1.1.1", [
                                 OID_END,
                                 1, # CISCO-ENTITY-SENSOR-MIB::entSensorType
                                 2, # CISCO-ENTITY-SENSOR-MIB::entSensorScale
                                 3, # CISCO-ENTITY-SENSOR-MIB::entSensorPrecision
                                 4, # CISCO-ENTITY-SENSOR-MIB::entSensorValue
                                 5, # CISCO-ENTITY-SENSOR-MIB::entSensorStatus
                               ]),

                               # Threshold
                               ( ".1.3.6.1.4.1.9.9.91.1.2.1.1", [
                                 OID_END,
                                 4, # Thresholds
                               ]),
                            ],
    "includes"          : [ 'cisco_sensor_item.include' ],
}
